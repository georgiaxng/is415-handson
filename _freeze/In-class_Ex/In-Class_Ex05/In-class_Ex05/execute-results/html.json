{
  "hash": "4cf38f0b3f4d84f3c0efa028867465b8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 5\"\nauthor: \"Georgia Ng\"\ndate: \"September 16, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. Overview\n\n# 2. Importing the Packages\n\nIn this in class exercise, we will be using the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n3 Data Wrangling\n\n### **3.1 Import shapefile into r environment**\n\nThe code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/In-class_Ex/In-Class_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### **3.2 Import csv file into r environment**\n\nNext, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n### **3.3 Performing relational join**\n\nThe code chunk below will be used to update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan,hunan2012)%>%\n  select(1:3, 7, 15, 16, 31,32)\n```\n:::\n\n\nSaving the output into a output file so that R studio will no longer need to waste time on the previous step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n```\n:::\n\n\nReading the data.\n\n\n::: {.cell}\n\n:::\n\n\n## 3.4 Converting to SpatialPolygonDataFrame\n\n::: callout-note\n**GWmodel is built around the older sp and not sf formats for handling spatial data in R.**\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>% as_Spatial()\n```\n:::\n\n\n# 4 Geographically Weighted Summary Statistics with adaptive bandwidth\n\n## 4.1 Determine Adaptive Bandwidth\n\n### 4.1.1 AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\nGood thing with GWmodel is that automatically determines the bandwidth for you\n\n::: callout-note\nUnit of measurement for bandwidth value shown here is in kilometres.\n:::\n\n### 4.1.2 Cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n\nIdentical to AIC, same number of results generated.\n\n## 4.2 Determine Fixed Bandwidth\n\n### 4.2.1 AIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 kernel = \"bisquare\",\n                 adaptive = FALSE,\n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n\n### 4.2.2 Cross Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, \n                 data = hunan_sp,\n                 approach = \"CV\",\n                 kernel = \"bisquare\",\n                 adaptive = FALSE,\n                 longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n\n::: callout-tip\nThe bandwidth calculated here can be used to pass it over to the calculation (in next section). The number of\n:::\n\n## 4.3 Computing Geographically Weighted Summary Statistics\n\nSince we are using one variable for two chunks of code above (bw_AIC), need to make sure that the adaptive one is ran before this chunk of code is ran.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngstat <- gwss( data = hunan_sp,\n                vars = \"GDPPC\",\n                bw = bw_AIC,\n                kernel = \"bisquare\",\n                adaptive = TRUE,\n                longlat = T)\n```\n:::\n\n\nHow to interpret the table of the data: GDPPC_LM –\\> Average of all the neighbours\n\n### 4.3.2 Preparing the output data\n\nCode chunk below is used to extract SDF data table from gwss object output from `gwss()`. It will be converted into data.frame. It will be converted into data.frame by using as.data.frame().\n\n::: callout-note\nSort or order etc altering functions cannot be applied to the code below, it will mess with the sequence fo the\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngstat_df <- as.data.frame(gstat$SDF)\n```\n:::\n\n\nNext, `cbind()` is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gstat_df)\n```\n:::\n\n\n## 4.4 Visualising Geographically Weighted Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat)+\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.5,\n            legend.width = 1.5,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}