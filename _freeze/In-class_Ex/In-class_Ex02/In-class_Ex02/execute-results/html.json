{
  "hash": "0de63cc9351c7f51b520e9e24993b21f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 2\"\nauthor: \"Georgia Ng\"\ndate: \"August 26, 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## 2.0 Overview\n\nIn this exercise, we learn the various practices of importing data,\n\nBefore we start the exercise, we will need to import necessary R packages first. We will use the following packages sf and tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse)\n```\n:::\n\n\n## 2.1 Importing data\n\n### 2.1.1 Dataset\n\nWe will be using the below datasets for this exercise.\n\n-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg\n\n-   Master Plan 2019 Subzone Boundary (Web) from data.gov.sg\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2023 from singstat.gov.sg\n\n### 2.1.2 Master Plan 2014 Subzone Boundary\n\nThis code chunk imports in shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp <- st_read(dsn = \"data/MPSZ2014/MasterPlan2014SubzoneBoundaryWebSHP/\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/In-class_Ex/In-class_Ex02/data/MPSZ2014/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nConverting the Master Plan 2014 Subzone Boundary shapefile to a kml file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#! output: false\nmpsz14_kml = st_write(mpsz14_shp,\"data/MPSZ2014/MasterPlan2014SubzoneBoundary_WEB_PL.kml\",delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/MPSZ2014/MasterPlan2014SubzoneBoundary_WEB_PL.kml' using driver `KML'\nWriting layer `MasterPlan2014SubzoneBoundary_WEB_PL' to data source \n  `data/MPSZ2014/MasterPlan2014SubzoneBoundary_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n:::\n\n\n### 2.1.3 Master Plan 2019 Subzone Boundary\n\nThe below chunk of code is used to import Master Plan 2019 shapefile and also project it to the 3414 crs system:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/MPSZ2019\", \n                  layer = \"MPSZ-2019\") %>%\nst_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/In-class_Ex/In-class_Ex02/data/MPSZ2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n> Refer to <https://epsg.io/> for the crs code when you need to reproject, if the coordinates are in geographic coordinate system, it may be necessary to convert it to the projected coordinate system and vice versa. It will depend on the usecase so it is important to check it.\n>\n> `st_crs()` can be used to check the crs currently used. eg. `st_crs(mpsz19_shp)`\n\nImporting Master Plan 2019 in kml format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/MPSZ2019/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/In-class_Ex/In-class_Ex02/data/MPSZ2019/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### 2.1.4 Population Data\n\nThe below code imports the population data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2023/respopagesextod2023.csv\")\n```\n:::\n\n\nAggregating the data and grouping them by area, subzone and age group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>%\n  group_by(PA,SZ,AG) %>%\n  summarize(`POP`=sum(`Pop`))%>%\n  ungroup()%>%\n  pivot_wider(names_from = AG,\n              values_from = POP)\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\nmutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\nrowSums(.[15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n## 2.2 Joining popdata2023 and mpsz19_shp\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>% mutate_at(.vars = vars(PA,SZ), .funs = list(toupper))\n```\n:::\n\n\n> `toupper` is used to convert all text to uppercases so that the data is uniform for comparison, filtering, or joining with other datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023_mpsz <- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}