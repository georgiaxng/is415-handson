{
  "hash": "7fe35f56ab59110b05888dda3e964af5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 4: Network Constrained Spatial Point Patterns Analysis\"\nauthor: \"Georgia Ng\"\ndate: \"September 2, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## **4.1 Overview**\n\n**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. This method is particularly useful for analyzing spatial point events that occur on or alongside networks, such as the locations of traffic accidents on a road network or the distribution of childcare centers along a river network.\n\nIn this hands-on exercise, we will utilize the **`spNetwork`** package in R to:\n\n1.  **Derive Network Kernel Density Estimation (NKDE)**:\n\n    -   NKDE is a technique used to estimate the intensity of point events over a network. It helps in identifying areas of high concentration of events, such as accident hotspots on a road network.\n\n    -   We will apply the `spNetwork::NKDE()` function to estimate the density of spatial point events along a given network.\n\n2.  **Perform Network G-Function and K-Function Analysis**:\n\n    -   G-function is a summary statistic that measures the distribution of the nearest neighbor distances of point events on the network. It helps in identifying clustering or regularity in the spatial distribution of events.\n\n    -   K-function, on the other hand, is used to measure the degree of clustering of points over various scales on the network.\n\n    -   We will use functions like `spNetwork::GFunction()` and `spNetwork::KFunction()` to perform these analyses and interpret the results in the context of the network.\n\n## **4.2 The Data**\n\nIn this study, we will analyse the spatial distribution of childcare centre in [Punggol planning area](https://en.wikipedia.org/wiki/Punggol). For the purpose of this study, two geospatial data sets will be used. They are:\n\n-   *Punggol_St*, a line features geospatial data which store the road network within Punggol Planning Area.\n\n-   *Punggol_CC*, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format.\n\n## **7.3 Installing and launching the R packages**\n\nIn this hands-on exercise, four R packages will be used, they are:\n\n-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n-   [sf](https://r-spatial.github.io/sf/index.html) package provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nUse the code chunk below to install and launch the four R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n## **7.4 Data Import and Preparation**\n\nThe code chunk below uses `st_read()` of **sf** package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}