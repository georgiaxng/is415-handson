{
  "hash": "bf78af0d3a62ddaebc22a0074e79ad47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Georgia Ng\"\ndate: \"October 17, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Click to view the code\"\n    embed-resources: true\n---\n\n\n# 1. Overview\n\n## 1.1 Introduction\n\n## 1.2 My Responsibilities\n\n-   Data Preparation, Preprocessing\n\n## 1.3 Importing Packages\n\nHere, we have loaded the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, RColorBrewer, ggplot2, spatstat)\n```\n:::\n\n\n# 2. The Data\n\nFor this project, we will be using the following data sets.\n\n-   Singapore Resale Flat Prices (Jan-17 to Sep-24) from [Kaggle](https://www.kaggle.com/datasets/lzytim/hdb-resale-prices?select=resale_hdb_price_for_kaggle_2024-30sep.csv), an accumulation of information relating to the sale of Singapore's public housing apartments colloquially referred to as flats\n\n    -   This dataset augments the original dataset by including 4 important categories of information:\n\n        1.  X/Y lat/lng coordinates, which can be used for geospatial plotting.\n\n        2.  Information about the closest MRT station to the flat\n\n        3.  Information about the closest primary school to flat\n\n        4.  the URA planning area (or town) of the flat.\n\n-   MP\n\n-   HDB Property Info from [data.gov.sg](https://data.gov.sg/collections/150/view)\n\n## 2.1 Importing Geospatial Data\n\nThe code chunk below is used to import *MP_SUBZONE_WEB_PL* shapefile by using `st_read()` of **sf**packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP/\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/Take-home_Ex/Take-home_Ex03/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nHere is a plot of Singapore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 2.2 Importing Aspatial Data\n\n### 2.2.1 Importing Resale Flat Prices\n\nThe code chunk below is used to import the Resale Flat Prices dataset from Kaggle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_df = read_csv('data/aspatial/resale_hdb_price_for_kaggle_2024-30sep.csv')\n```\n:::\n\n\nTo get a brief overview of existing columns of this dataset, we can use `colnames()` to do so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(resale_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"...1\"                          \"month\"                        \n [3] \"storey_range\"                  \"floor_area_sqm\"               \n [5] \"flat_model\"                    \"lease_commence_date\"          \n [7] \"remaining_lease\"               \"resale_price\"                 \n [9] \"floor_area_sqft\"               \"price_per_sqft\"               \n[11] \"blk_no\"                        \"road_name\"                    \n[13] \"building\"                      \"postal\"                       \n[15] \"address\"                       \"lease_commence_date_r\"        \n[17] \"planning_area_ura\"             \"region_ura\"                   \n[19] \"x\"                             \"y\"                            \n[21] \"latitude\"                      \"longitude\"                    \n[23] \"closest_mrt_station\"           \"distance_to_mrt_meters\"       \n[25] \"transport_type\"                \"line_color\"                   \n[27] \"distance_to_cbd\"               \"closest_pri_school\"           \n[29] \"distance_to_pri_school_meters\"\n```\n\n\n:::\n:::\n\n#### 2.2.1.1 CRS Adjustments\nAnother important step after importing the dataset is checking the coordinate system used, as seen in the result below using `st_crs()`, we can see that there is no CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(resale_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\nTherefore, we need to convert the longitude and latitude columns into a spatial format. Since our dataset is based in Singapore and it uses the SVY21 coordinate reference system (CRS Code: 3414), we will use the `st_transform()` function to perform the conversion and create the geometry column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_sf <- resale_df %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nUsing `st_crs()`, we can check and verify that the conversion is successful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(resale_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resale_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 29\n   ...1 month      storey_range floor_area_sqm flat_model    lease_commence_date\n  <dbl> <date>     <chr>                 <dbl> <chr>         <date>             \n1     0 2017-01-01 10 TO 12                 44 Improved      1979-01-01         \n2     1 2017-01-01 01 TO 03                 67 New Generati… 1978-01-01         \n3     2 2017-01-01 01 TO 03                 67 New Generati… 1980-01-01         \n4     3 2017-01-01 04 TO 06                 68 New Generati… 1980-01-01         \n5     4 2017-01-01 01 TO 03                 67 New Generati… 1980-01-01         \n6     5 2017-01-01 01 TO 03                 68 New Generati… 1981-01-01         \n# ℹ 23 more variables: remaining_lease <chr>, resale_price <dbl>,\n#   floor_area_sqft <dbl>, price_per_sqft <dbl>, blk_no <chr>, road_name <chr>,\n#   building <chr>, postal <chr>, address <chr>, lease_commence_date_r <date>,\n#   planning_area_ura <chr>, region_ura <chr>, x <dbl>, y <dbl>,\n#   latitude <dbl>, longitude <dbl>, closest_mrt_station <chr>,\n#   distance_to_mrt_meters <dbl>, transport_type <chr>, line_color <chr>,\n#   distance_to_cbd <dbl>, closest_pri_school <chr>, …\n```\n\n\n:::\n:::\n\n\n### 2.2.2 Importing HDB Property Information\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_info_df <- read_csv('data/aspatial/HDB Property Information.csv')\n```\n:::\n\n\n## 2.3 Data Wrangling\n\n### 2.3.1 Adding Housing Type for Flats\n\nTo assess whether the housing type influences the resale price of flats, we need to include this variable in our analysis. However, the current dataset lacks this information and thus we will be deriving it using other relevant variables. Specifically, we can use the floor area of the flats to determine the housing type, based on the guidelines provided on [data.gov.sg](https://www.data.com.sg/template-m.jsp?p=my/1.html).\n\n-   2 Rm (2 room HDB Flat). 1 bedroom with a built-in area of about 45 sq m or 485 sq ft.\n\n-   3 Rm (3 room HDB Flat). 2 bedrooms with a built-in area of about 70 sq m or 754 sq ft.\n\n-   4 Rm (4 room HDB Flat). 3 bedrooms with a built-in area of about 90 sq m or 969 sq ft.\n\n-   5 Rm (5 room HDB Flat). 3 bedrooms with a built-in area of about 110 sq m or 1,184 sq ft.\n\n-   EA (Executive Apartment). 3/4 bedrooms with built-in area of about 150 sqm or 1,615 sqft.\n\n-   EM (Executive Mansionette). Same as Executive apartment, except it has two levels.\n\n-   6 Rm (6 room HDB Flat). Jumbo flat joint by two 3 room flats\n\nParticularly, we will just group EA, EM and 6 rm flats into one category since there is no way for us right now to differentiate just by the size of the flats.\n\nThis chunk of code below derives the housing type for each flat by using conditional statements to check if the stated floor area is closer to that of a particular housing type and add the value in the new column created using `mutate()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_sf <- resale_sf %>%\n  mutate(housing_type = case_when(\n    floor_area_sqft <= 619 ~ \"2 Rm\",  # Closer to 485 sqft\n    floor_area_sqft > 619 & floor_area_sqft <= 862 ~ \"3 Rm\",  # Closer to 754 sqft\n    floor_area_sqft > 862 & floor_area_sqft <= 1076 ~ \"4 Rm\",  # Closer to 969 sqft\n    floor_area_sqft > 1076 & floor_area_sqft <= 1399 ~ \"5 Rm\",  # Closer to 1184 sqft\n    floor_area_sqft > 1399 ~ \"EA/EM/6 Rm\",  # Closer to 1615 sqft\n  ))\n```\n:::\n\n\n### 2.3.2 Grouping Remaining Lease By Range\n\nFirst, let us convert the lease period from `chr` to total months. Below, we extract the different year and month from the string and then make the calculations to convert it to total months.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to convert lease period to total months\nconvert_to_months <- function(lease) {\n  parts <- strsplit(lease, \" \")[[1]]  # Split by space\n  years <- as.numeric(parts[1])        # Extract years\n  # Check if months are present\n  if (length(parts) > 2) {\n    months <- as.numeric(parts[3])       # Extract months if present\n  } else {\n    months <- 0                           # Set months to 0 if not present\n  }\n  \n  total_months <- years * 12 + months  # Convert to total months\n  return(total_months)\n}\nresale_sf <- resale_sf %>%\n  mutate(remaining_lease_total_months = sapply(remaining_lease, convert_to_months))\n```\n:::\n\n\nUsing the number of total months, we can then get a brief overview of the remaining lease of the resale flat including the mins and max. In this case, we can see that the minimum number of months is 497 (ard 41 years) and maximum is 1173 (around 97 years). This information will later be useful in setting the ranges for the remaining lease.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(resale_sf['remaining_lease_total_months'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n remaining_lease_total_months          geometry     \n Min.   : 497.0               POINT        :190724  \n 1st Qu.: 756.0               epsg:3414    :     0  \n Median : 893.0               +proj=tmer...:     0  \n Mean   : 894.4                                     \n 3rd Qu.:1062.0                                     \n Max.   :1173.0                                     \n```\n\n\n:::\n:::\n\n\nSince the minimum is 41 years, our date range can start from 40-49 years onwards.\n\n::: callout-note\nE.g. 40-49 years refers to 40 years 0 months to 49 years 11 months.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the ranges and labels\nbreaks <- c(480, 600, 720, 840, 960, 1080, 1200)\nlabels <- c( \"40-49 years\", \"50-59 years\", \"60-69 years\", \"70-79 years\", \"80-89 years\", \"90-99 years\")\n\nresale_sf <- resale_sf %>%\n  mutate(remaining_lease_range = cut(remaining_lease_total_months, breaks = breaks, labels = labels))\n```\n:::\n\n\n### 2.3.3 Removal of Redundant Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define columns to be removed\ncolumns_to_remove <- c(\"floor_area_sqm\", \"flat_model\", \"lease_commence_date\", \"remaining_lease\", \"blk_no\", \"road_name\", \"building\", \"address\", \"lease_commence_date_r\", \"postal\",\"...1\")\n\n# Remove columns only if they exist in the dataframe\nresale_sf <- resale_sf %>%\n  dplyr::select(-all_of(columns_to_remove[columns_to_remove %in% names(resale_sf)]))\n```\n:::\n\n\n### 2.3.4 Adjustments to Storey Ranges\nThrough the histogram of the storey ranges, we can observe a right skewed distribution which shows that higher storeys are of a much lower frequency among resale flats. This is likely due to the fact that most HDB flats in Singapore are lower-rise buildings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a summary of counts for each remaining lease range\ncount_data <- resale_sf %>%\n  group_by(storey_range) %>%\n  summarise(count = n())\n\n# Create the bar plot with labels\nggplot(count_data, aes(x = storey_range, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + \n  geom_text(aes(label = count), vjust = -0.5, size = 4) +  # Add labels on top of the bars\n  labs(title = \"Count of Storey Range\",\n       x = \"Storey Range\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-16-1.png){width=1152}\n:::\n:::\n\n\nHere is a summary of the maximum floor levels of all the HDB flats in Singapore. As shown here we can observe that both the mean and median maximum floor is a mere 12.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(hdb_info_df$max_floor_lvl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0     6.0    12.0    12.1    16.0    50.0 \n```\n\n\n:::\n:::\n\n\nThus, to simplify our analysis and make the visualization easier to interpret, we can combine the higher storey ranges into a single broader range. In particular, we will group the floors 16 or higher together to form the 16+ floors range.\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_sf <- resale_sf %>%\n    mutate(storey_range_grouped = case_when(\n        storey_range %in% c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\") ~ storey_range,\n        storey_range %in% c(\"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\") ~ \"16+\",\n        TRUE ~ storey_range\n    ))\n\n# Plot the grouped data\nggplot(resale_sf, aes(x = storey_range_grouped)) +\n    geom_bar() +\n    geom_text(stat='count', aes(label=..count..), vjust=-0.5) +\n    labs(title = \"Count of Storey Range (Grouped)\",\n         x = \"Storey Range\",\n         y = \"Count\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n### 2.3.5 Checking for NA values\n\n\n### 2.3.6 Time Period Selection for Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_5yr_sf <- resale_sf %>% filter (year(month) >= 2020)\nwrite_rds(resale_5yr_sf,'data/rds/resale_5yr_sf.rds')\n```\n:::\n\n\n## 2.4 Overview Of Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(resale_5yr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"month\"                         \"storey_range\"                 \n [3] \"resale_price\"                  \"floor_area_sqft\"              \n [5] \"price_per_sqft\"                \"planning_area_ura\"            \n [7] \"region_ura\"                    \"x\"                            \n [9] \"y\"                             \"closest_mrt_station\"          \n[11] \"distance_to_mrt_meters\"        \"transport_type\"               \n[13] \"line_color\"                    \"distance_to_cbd\"              \n[15] \"closest_pri_school\"            \"distance_to_pri_school_meters\"\n[17] \"geometry\"                      \"housing_type\"                 \n[19] \"remaining_lease_total_months\"  \"remaining_lease_range\"        \n[21] \"storey_range_grouped\"         \n```\n\n\n:::\n:::\n\n\n**Explanatory Variables:**\n\nContinuous\n\n-   Remaining Lease: `remaining_lease_total_months`\n\n-   Size of flat: `floor_area_sqft`\n\n-   Distance to transport: `distance_to_mrt_meters`\n\n-   Distance to amenities: `distance_to_pri_school_meters`\n\n-   Distance to central business district: `distance_to_cbd`\n\nCategorical\n\n-   Remaining Lease: `remaining_lease_period`\n\n-   Storey Height: `storey_range`\n\n-   Housing Type: `housing_type`\n\n**Dependent Variables:**\n\n-   Resale Price: `resale_price`, `price_per_sqft`\n\n# 3. Shiny Storyboard \n# 4. Distribution\n\n## 4.1 Categorical Variables\n\n### 4.1.1 Remaining Lease Range\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a summary of counts for each remaining lease range\ncount_data <- resale_5yr_sf %>%\n  group_by(remaining_lease_range) %>%\n  summarise(count = n())\n\n# Create the bar plot with labels\nggplot(count_data, aes(x = remaining_lease_range, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + \n  geom_text(aes(label = count), vjust = -0.5, size = 4) +  # Add labels on top of the bars\n  labs(title = \"Count of Remaining Lease Ranges\",\n       x = \"Remaining Lease Range\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### 4.1.2 Storey Range\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a summary of counts for each remaining lease range\ncount_data <- resale_5yr_sf %>%\n  group_by(storey_range_grouped) %>%\n  summarise(count = n())\n\n# Create the bar plot with labels\nggplot(count_data, aes(x = storey_range_grouped, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + \n  geom_text(aes(label = count), vjust = -0.5, size = 4) +  # Add labels on top of the bars\n  labs(title = \"Count of Storey Range\",\n       x = \"Storey Range\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-22-1.png){width=1152}\n:::\n:::\n\n\n### 4.1.3 Housing Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a summary of counts for each remaining lease range\ncount_data <- resale_5yr_sf %>%\n  group_by(housing_type) %>%\n  summarise(count = n())\n\n# Create the bar plot with labels\nggplot(count_data, aes(x = housing_type, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + \n  geom_text(aes(label = count), vjust = -0.5, size = 4) +  # Add labels on top of the bars\n  labs(title = \"Count of Housing Type\",\n       x = \"Housing Type\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n# Bivariate Analysis\n\n# Correlation Matrix\n\n\n# Drafts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlease_storey_table <- table(resale_5yr_sf$storey_range_grouped, resale_5yr_sf$remaining_lease_range)\nlease_storey_df <- as.data.frame(lease_storey_table)\n\n# Heatmap with ggplot\nggplot(lease_storey_df, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  labs(title = \"Heatmap: Storey Range vs. Remaining Lease Range\",\n       x = \"Storey Range\",\n       y = \"Remaining Lease Range\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-24-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_main <- st_union(mpsz) %>%\n    st_cast(\"POLYGON\")\nmpsz_main <- mpsz_main[c(12)]\n\nmpsz_owin <- as.owin(mpsz_main)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_2020_sf <- resale_5yr_sf %>% filter (year(month) == 2020)\nresale_2021_sf <- resale_5yr_sf %>% filter (year(month) == 2021)\nresale_2022_sf <- resale_5yr_sf %>% filter (year(month) == 2022)\nresale_2023_sf <- resale_5yr_sf %>% filter (year(month) == 2023)\nresale_2024_sf <- resale_5yr_sf %>% filter (year(month) == 2024)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(mpsz%>% filter(PLN_AREA_N == 'ANG MO KIO'))+\n  tm_polygons()+\ntm_shape(resale_2023_sf %>% filter(planning_area_ura == 'ANG MO KIO'))+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(mpsz%>% filter(PLN_AREA_N == 'ANG MO KIO'))+\n  tm_polygons()+\ntm_shape(resale_2024_sf %>% filter(planning_area_ura == 'ANG MO KIO'))+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- resale_5yr_sf %>% filter(housing_type == 'EA/EM/6 Rm')\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10649 features and 20 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11519.15 ymin: 28097.64 xmax: 42623.63 ymax: 48372.85\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 10,649 × 21\n   month      storey_range resale_price floor_area_sqft price_per_sqft\n * <date>     <chr>               <dbl>           <dbl>          <dbl>\n 1 2020-01-01 01 TO 03           700000           1432.           489.\n 2 2020-01-01 07 TO 09           770000           1755.           439.\n 3 2020-01-01 07 TO 09           623000           1615.           386.\n 4 2020-01-01 04 TO 06           615000           1421.           433.\n 5 2020-01-01 07 TO 09           590000           1464.           403.\n 6 2020-01-01 13 TO 15           765000           1432.           534.\n 7 2020-01-01 04 TO 06           525000           1432.           367.\n 8 2020-01-01 13 TO 15           758000           1539.           492.\n 9 2020-01-01 07 TO 09           680000           1528.           445.\n10 2020-01-01 13 TO 15           798888           1539.           519.\n# ℹ 10,639 more rows\n# ℹ 16 more variables: planning_area_ura <chr>, region_ura <chr>, x <dbl>,\n#   y <dbl>, closest_mrt_station <chr>, distance_to_mrt_meters <dbl>,\n#   transport_type <chr>, line_color <chr>, distance_to_cbd <dbl>,\n#   closest_pri_school <chr>, distance_to_pri_school_meters <dbl>,\n#   geometry <POINT [m]>, housing_type <chr>,\n#   remaining_lease_total_months <dbl>, remaining_lease_range <fct>, …\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}