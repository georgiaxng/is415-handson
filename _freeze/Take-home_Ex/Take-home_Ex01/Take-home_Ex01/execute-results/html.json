{
  "hash": "5d6b86230eb5662fca07bcde7e366202",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"Georgia Ng\"\ndate: \"September 5, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Click to view the code\"\n---\n\n\n# 1. Overview\n\n## 1.1 Introduction\n\nSince early 2021, Myanmar has been engulfed in a brutal civil war that erupted following the military coup on February 1, 2021, which ousted the democratically elected government led by Aung San Suu Kyi. The coup ignited widespread protests and a civil disobedience movement across the country, escalating into armed resistance as various ethnic armed groups and newly formed militias began confronting the military junta. The conflict has led to severe humanitarian crises, including widespread violence, displacement, and human rights abuses. The military's response has been marked by extreme repression, including airstrikes and targeted attacks on civilian populations, exacerbating the suffering of ordinary Myanmar citizens. Despite international condemnation and calls for a return to democratic governance, the violence continues, deepening the political instability and socio-economic challenges faced by Myanmar.\n\nIn light of this ongoing crisis, I will be conducting a detailed geospatial analysis of the conflict events in Myanmar. This analysis aims to map and evaluate the spatial distribution and intensity of conflict incidents from 2021 to 2024. By utilizing geospatial techniques and spatial data, I will examine patterns of violence, identify hotspots of conflict, and assess the impact on civilian areas. This approach will provide valuable insights into the spatial dynamics of the conflict, helping to inform humanitarian responses and policy decisions.\n\n## 1.2 Goal\n\nWe will be focusing on 4 event types: **Battles, Explosion/Remote violence, [Strategic developments](https://acleddata.com/knowledge-base/strategic-developments-in-the-acled-dataset/), and Violence against civilians.**\n\n-   Using appropriate function of **sf** and **tidyverse** packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\n\n-   Using the geospatial data sets prepared, derive quarterly KDE layers.\n\n-   Using the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\n\n-   Using the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\n\n-   Using the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\n\n-   Using appropriate **tmap** functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\n\n-   Describe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps.1.1 The Data\n\n## 1.3 Importing of Packages\n\nBefore we start off, we will have to import the necessary packages required for us to conduct our analysis.\n\nWe will be using the following packages:\n\n-   **`sf`**: Manages spatial vector data, enabling operations like spatial joins, buffering, and transformations for points, lines, and polygons.\n\n-   **`raster`**: Handles raster data, allowing for operations such as raster calculations, resampling, and visualization of spatial grids (e.g., elevation or satellite images).\n\n-   **`spNetwork`**: Analyzes spatial networks by modeling connectivity and movement within networks like road systems or utility grids.\n\n-   **`tmap`**: Creates and customizes thematic maps for spatial data visualization, including static and interactive maps with various map elements.\n\n-   **`tidyverse`**: A suite of packages for data manipulation (`dplyr`), visualization (`ggplot2`), and tidying (`tidyr`), facilitating a streamlined workflow for data analysis.\n\n-   **`RColorBrewer`**: Provides a range of color palettes for effective and aesthetically pleasing data visualization, including options for categorical, sequential, and diverging data.\n\n-   **`spatstat`**: Conducts spatial statistics and analysis, including point pattern analysis and spatial simulations, to study spatial distributions and interactions.\n\n-   **`sparr`**: Facilitates the analysis of spatial point patterns and spatial autoregressive models. It includes functions for fitting and analyzing spatial point processes, particularly useful for examining spatial dependencies and interactions in point pattern data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spNetwork, tmap, tidyverse, RColorBrewer, spatstat, sparr)\n```\n:::\n\n\n## 1.4 The Data\n\nFor the purpose of this study, we will be using the following datasets. Particularly, I will be focusing on the quarterly armed conflict events from January 2021 until June 2024.\n\n-   Armed Conflict Location & Event Data of Myanmar between Jan 2021 to Jun 2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world.\n\n-   Myanmar State and Region Boundaries with Sub-region from [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)\n\n# 2. Data Wrangling\n\n## 2.1 ACLED data\n\n### 2.1.1 Importing Data\n\nThe below chunk of code is used to import ACLED conflict data from a CSV file and convert it into a geospatial data frame using longitude and latitude as coordinates.\n\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system which is why in this case we will project it to `WGS84` with the crs code of `32647` using `st_transform`.\n\nSince the column `event_date` was stored as characters, `dmy()` is also used to format the `event_date` column into a standardized date format for further analysis.\n\n> `st_as_sf` is used to convert a data frame or other tabular data (like from CSVs, data frames, or tibbles) into a simple features (sf) object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\") %>% \n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"), crs = 4326) %>% \n  st_transform(crs= 32647)%>%\n  mutate(event_date = dmy(event_date))\n```\n:::\n\n\nNow, let us check the CRS again by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 2.1.2 Data Pruning and Structuring\n\n#### 2.1.2.1 Extracting Data for the 4 Main Event Types\n\nSince the data we have encapsulates all 6 types of events and we are only focusing on the 4 event types that I have indicated above, we will only be extracting the data related to that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  filter(event_type %in% c(\"Battles\", \"Strategic developments\", \"Violence against civilians\", \"Explosions/Remote violence\"))\n```\n:::\n\n\nUsing `unique()`, we can check that only rows that fall under the 4 event types have been kept.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(acled_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n```\n\n\n:::\n:::\n\n\n#### 2.1.2.2 Data Transformation for Quarterly Analysis\n\nSince we will be analyzing it by quarters, let's use `mutate()` to extract the information. Using `quarter()` from the `lubridate` package, we can derive the quarters from the event_date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>% mutate(quarter = quarter(event_date))\n```\n:::\n\n\nUsing `colnames()` we can see that the new column `quarter` is added.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acled_sf) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"geo_precision\"      \"source\"            \n[25] \"source_scale\"       \"notes\"              \"fatalities\"        \n[28] \"tags\"               \"timestamp\"          \"geometry\"          \n[31] \"quarter\"           \n```\n\n\n:::\n:::\n\n\n#### 2.1.2.3 Removal of Redundant Columns\n\nTo enhance the efficiency of our dataset, we will also remove redundant columns. This practice reduces memory usage and processing time while simplifying the analysis. By focusing on only the relevant data, we minimize complexity and ensure clearer, more focused results. Examples of the columns we will be removing are: `time_precision`, `inter1` etc. With this, we are able to reduce to a total of **20** columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define columns to be removed\ncolumns_to_remove <- c(\"time_precision\", \"inter1\", \"inter2\", \"iso\", \"source\", \"source_scale\", \"notes\", \"tags\", \"region\", \"geo_precision\", \"source_scale\",\"country\")\n\n# Remove columns only if they exist in the dataframe\nacled_sf <- acled_sf %>%\n  dplyr::select(-all_of(columns_to_remove[columns_to_remove %in% names(acled_sf)]))\n```\n:::\n\n\nThis is an overview of all the columns left:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"disorder_type\"      \"event_type\"         \"sub_event_type\"    \n [7] \"actor1\"             \"assoc_actor_1\"      \"actor2\"            \n[10] \"assoc_actor_2\"      \"interaction\"        \"civilian_targeting\"\n[13] \"admin1\"             \"admin2\"             \"admin3\"            \n[16] \"location\"           \"fatalities\"         \"timestamp\"         \n[19] \"geometry\"           \"quarter\"           \n```\n\n\n:::\n:::\n\n\n#### 2.1.2.4 Grouping of Data By Year, Quarter, Event Type\n\nThis chunk of code groups the ACLED Data by quarter, event and year, allowing us to better manage and access the data later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrped_acled_sf <- acled_sf %>%\n  group_by(year, quarter, event_type) %>%\n  summarize(event_count = n(), .groups = 'drop')\n```\n:::\n\n\n## 2.2 Myanmar Boundary and Sub-Region Dataset from MIMU\n\nThe code chunk below uses *`st_read()`* function of **sf** package to import `mmr_polbnda2_adm1_250k_mimu_1` shapefile into R as a polygon feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmrsr_sf <- st_read(dsn=\"data/geospatial/mmr_polbnda2_adm1_250k_mimu_1/\", \n                   layer=\"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/Take-home_Ex/Take-home_Ex01/data/geospatial/mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nAs shown below, currently the data is in geographic coordinate system (latitude/longitude), we will need to transform it to a projected CRS before proceeding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ID[\"EPSG\",6326]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433],\n        ID[\"EPSG\",8901]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic longitude\",east,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic latitude\",north,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmmrsr_sf <- st_transform(mmrsr_sf, crs = 32647)\nst_crs(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nTo check that all the spatial objects are valid, `st_is_valid()` is utilized. As shown below, all of the objects are valid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_valid(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\nThis is a brief overview of how the map of Myanmar looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mmrsr_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 2.3 Mapping the Geospatial data sets\n\nNow, let’s plot the spatial map to gain an initial understanding of the geographic distribution of all of the 4 conflict events by year. As observed, with such a large volume of data, identifying patterns through visual inspection alone can be challenging. This highlights the importance of conducting further analysis to uncover trends and achieve a deeper understanding of the spatial dynamics of these events.\n\nFrom a brief examination of the map, it’s evident that the region south of Sagaing exhibits the highest concentration of conflicts overall. This area shows a notably higher density of conflict events compared to other regions, marking it as a significant hotspot. However, to fully grasp these patterns and their implications, additional analysis is needed.\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2021\nacled_2021 <- acled_sf %>% filter(year == 2021)\n\n# Plot map for 2021\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2021) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2021\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2022\nacled_2022 <- acled_sf %>% filter(year == 2022)\n\n# Plot map for 2022\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2022) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2022\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2023\nacled_2023 <- acled_sf %>% filter(year == 2023)\n\n# Plot map for 2023\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2023) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2023\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2024\nacled_2024 <- acled_sf %>% filter(year == 2024)\n\n# Plot map for 2024\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2024) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2024\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n:::\n\n## 2.4 Myanmar Sub-regions: For Reference and Context\n\nFor reference to the different sub-regions in Myanmar, we can refer to the labelled map plotted below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_colors <- length(unique(mmrsr_sf$ST))\ncolors <- brewer.pal(n = num_colors, name = \"Set3\")\n\ntm_shape(mmrsr_sf) +\n  tm_polygons(col = \"ST\", palette = colors) +  # Apply color palette to polygons\n  tm_text(\"ST\", size = 1, col = \"black\", bg.color = \"white\", just = c(\"center\", \"center\"),  xmod = 0, ymod = 0) + tm_layout(main.title = \"Myanmar\",\n            main.title.position = \"center\",\n            main.title.size = 1.6,\n            legend.outside = TRUE,\n            frame = TRUE)+\n    tm_legend(title = \"Sub-regions\")  # Set custom legend title\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n# 2.5 Setting Seed\n\nTo ensure the reproducibility, we will be using a fixed seed for our randomisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\n```\n:::\n\n\n# 3. Kernel Density Estimation\n\nTo analyze and find the trends in the spatial distribution of conflict events in Myanmar, we will be using **Kernel Density Estimation (KDE)**. KDE is a non-parametric way to estimate the probability density function of a random variable, making it particularly useful in spatial analysis for identifying areas with high concentrations of events.\n\nTo determine the optimal bandwidth and kernel parameters for KDE, we will be using a sample of the data. By focusing on a smaller subset, such as specific event types or time periods, we can efficiently explore different parameter combinations and choose the one that provides the most meaningful results before scaling the analysis to the entire dataset.\n\n## 3.1 Creating owin object\n\nTo improve the accuracy of our spatial analysis, we will exclude the smaller islands that are too minor to contribute meaningfully to the Kernel Density Estimation (KDE). We will focus on the main island by merging the geometry and selecting the relevant polygon.\n\nIn this code snippet, we combine all intersecting geometries in the `mmrsr_sf` object into a single polygon using `st_union()`. We then use `st_cast()` to ensure that the result is a polygon type. From this merged polygon, we select the row with the highest number of features, which typically corresponds to the main island or the most prominent feature in the dataset.\n\nThis selected polygon is then converted to a window object using as.owin(), which allows us to use it in spatial analyses, such as Kernel Density Estimation (KDE).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_mmr <- st_union(mmrsr_sf) %>%\n    st_cast(\"POLYGON\")\nmerged_mmr <- merged_mmr[c(9)]\n\nmmr_owin <- as.owin(merged_mmr)\n```\n:::\n\n\nHere is the plot of the main island, without its outer islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n## 3.2 Selection of Sample Data\n\nTo choose a representative sample, we will first calculate the median number of data points across different groupings, such as year, quarter, and event type. This will help us understand the typical size of our data subsets. Using this median value, we will identify the subset of data with an `event_count` closest to this median.\n\nBy selecting a sample that aligns with this typical value, we ensure that our sample accurately reflects the general distribution of the dataset. We will then use this representative sample to determine the optimal parameters for Kernel Density Estimation (KDE), such as bandwidth and kernel type. This approach will help us achieve more reliable and meaningful results in our spatial analysis.\n\nHere is the R code to select the representative sample. In this case, the resulting sample data we have arrived at is for **\"Battles\" in the second quarter of 2023**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean and median of event counts\nmedian_event_count <- median(grped_acled_sf$event_count)\n\n# Find the row with event_count closest to the median\nsample_acled_sf <- grped_acled_sf %>%\n  mutate(distance_to_median = abs(event_count - median_event_count)) %>%\n  arrange(distance_to_median) %>%\n  slice(1)\n\n# Print the closest row(s)\nsample_acled_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 5 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -174035.7 ymin: 1103500 xmax: 518300.4 ymax: 3006373\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 6\n   year quarter event_type event_count                                  geometry\n  <dbl>   <int> <chr>            <int>                          <MULTIPOINT [m]>\n1  2023       2 Battles            814 ((-174035.7 2284958), (-152179.1 2277258…\n# ℹ 1 more variable: distance_to_median <dbl>\n```\n\n\n:::\n:::\n\n\nHere, we converted the representative sample data to `ppp` format and checked for duplicates. In this case, no duplicates were found, confirming the integrity of our sample for further KDE analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_acled_ppp <- as.ppp(st_coordinates(sample_acled_sf),st_bbox(sample_acled_sf))\nany(duplicated(sample_acled_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nsample_acled_ppp <- sample_acled_ppp[mmr_owin]\n```\n:::\n\n\nAn overview of the point pattern plot for the sample data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sample_acled_ppp, pch = 16, cex = 0.8) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n## 3.3 Determining the Optimal Bandwidth & Sigma\n\n### 3.3.1 Understanding Sigma & Kernel in Kernel Density Estimation (KDE)\n\n**Kernel:**\n\nThe **kernel** in Kernel Density Estimation (KDE) is a smoothing function that estimates the probability density function of a dataset. The choice of kernel function affects how the smoothing is applied to each data point. Common kernels include:\n\n-   **Gaussian Kernel**: Assumes a normal distribution around each data point, providing a smooth, continuous density estimate.\n\n-   **Epanechnikov Kernel**: Parabolic in shape, it minimizes mean squared error but is less smooth than Gaussian.\n\n-   **Uniform Kernel**: Assumes constant density within a fixed distance around each data point, simpler but less smooth.\n\n-   **Triangular Kernel**: Offers a clear density representation with sharp edges but less smoothness.\n\nThe choice of kernel affects the density estimate's smoothness and shape, with the Gaussian kernel being a versatile and commonly used option.\n\n**Sigma:**\n\nThe **sigma** argument in the density() function represents the bandwidth of the kernel in KDE. It controls the level of smoothing applied to the density estimate:\n\n-   **What Sigma Represents**: Sigma defines the standard deviation of the kernel function, determining the width of the \"smoothing window\" around each data point.\n\n-   **Effect on KDE**:\n\n    -   **Smaller Sigma**: Leads to less smoothing, producing a more sensitive and detailed density plot, but can highlight noise.\n\n    -   **Larger Sigma**: Results in greater smoothing, providing a broader view of density but might obscure finer details.\n\n-   **Choosing Sigma**: An appropriate sigma balances detail and smoothness. Methods like `bw.diggle`, `bw.ppl`, and `bw.scott` can help determine the optimal sigma value.\n\nIn summary, the kernel determines the density estimate's shape, while sigma controls the smoothing level. Both are crucial for accurately reflecting the spatial distribution of data, and selecting the right parameters is essential for meaningful KDE results.\n\n### 3.3.2 Computing Default Kernel Density Estimation\n\nFirst, since the original data is in meters, we need to rescale it to kilometers to facilitate more meaningful spatial analysis and visualization. By converting the units to kilometers, we ensure that the scale of the Kernel Density Estimation (KDE) and subsequent analyses align with the geographical extent of the study area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_acled_ppp.km <- rescale.ppp(sample_acled_ppp, 1000, \"km\")\n```\n:::\n\n\nTo visualize the spatial distribution of conflict events, here is the Kernel Density Estimation (KDE) plot generated using the default settings, as shown in the code. While default settings can be sufficient for some analyses, the resulting KDE plot here appears oversmoothed, which may obscure finer details and potential small-scale clusters.\n\nThis oversmoothing effect reduces the ability to detect subtle patterns in the conflict events, highlighting the importance of adjusting parameters like bandwidth (`sigma`) to better capture the underlying spatial structure. Thus, to improve the accuracy and granularity of the KDE, we will need to continue experimenting with different bandwidth values and kernel functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,1,1,1))\nkde_default_destination <- density(sample_acled_ppp.km)\nplot(kde_default_destination,main = \"Default Density KDE for ACLED Myanmar 2023 Q2 'Battles'\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Experimenting With Fixed Bandwidth\n\nTo effectively choose the appropriate bandwidth for Kernel Density Estimation (KDE), several automatic bandwidth selection methods can be employed. Each method has its own approach and focus, which can significantly impact the resulting density estimate. Below are brief descriptions of four common bandwidth selection methods:\n\n-   **bw.CvL**: Calculates bandwidth using cross-validation to minimize the integrated mean squared error (IMSE) of the density estimate. This method aims to balance detail and smoothness by optimizing the bandwidth based on a global error metric, which might lead to a broad smoothing effect.\n\n-   **bw.scott**: Applies a rule-of-thumb bandwidth based on the sample size and dimensionality of the data. This method is often effective for larger datasets, providing a more generalized estimate by assuming isotropic smoothing (uniform smoothing in all directions).\n\n-   **bw.ppl**: Uses a bandwidth tailored for point pattern analysis, considering the spatial distribution of data points. This approach focuses on capturing local variations and spatial patterns, resulting in a more localized smoothing effect compared to other methods.\n\n-   **bw.diggle**: Employs a method specifically designed for point patterns to minimize the variance of the density estimate. This results in a smaller bandwidth, leading to a finer and more detailed density plot that may capture small-scale variations but could also emphasize noise.\n\n### 3.4.1 Automatic Bandwidth Methods\n\nLets begin by examining the bandwidth values obtained from various automatic bandwidth selection methods using the following code snippet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.ppl(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n21.20514 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.diggle(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n8.459462 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.CvL(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n90.92206 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.scott(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  sigma.x   sigma.y \n 51.29856 133.58599 \n```\n\n\n:::\n:::\n\n\nBased on the sigma values obtained from the automatic bandwidth calculation methods, we can draw the following inferences about the Kernel Density Estimation (KDE) for the sample data:\n\n-   **bw.ppl: sigma = 21.21**\\\n    A smaller sigma value suggests a more localized smoothing effect. This method is designed for point pattern analysis and aims to capture spatial patterns with greater precision, highlighting finer details within the data.\n\n-   **bw.diggle: sigma = 8.46**\\\n    As the smallest sigma value, it implies a very narrow smoothing window. This method focuses on minimizing variance and tends to produce a detailed density plot. However, it may also accentuate noise or small fluctuations in the data.\n\n-   **bw.CvL: sigma = 90.92**\\\n    This large value indicates a broad smoothing window. Consequently, each data point affects a wide surrounding area, leading to a smoother KDE that may obscure fine details and small-scale variations.\n\n-   **bw.scott: sigma.x = 51.30, sigma.y = 133.59**\\\n    The method provides different bandwidths for the x and y dimensions, suggesting anisotropic smoothing. The significant difference between these values indicates varying spatial variations in different directions, with a broader smoothing effect along the y-direction.\n\n### 3.4.2 Plotting KDE for Different Bandwidth & Kernel\n\nTo better understand these differences, we will plot the KDE results using each bandwidth value and different kernels. This visual comparison will help us assess how each bandwidth setting and kernel type influences the density estimates, allowing us to determine which combination provides the most meaningful representation of our data.\n\nIn practice, choosing the optimal KDE bandwidth is not straightforward, as there is no one-size-fits-all approach. Many studies emphasize that determining the best bandwidth often relies on visually comparing various settings and kernel types to assess their effectiveness and select the most appropriate one for the specific data at hand.\n\n#### 3.4.2.1 Overview of KDE Maps with Gaussian Kernel and Various Bandwidths\n\nHere is an overview of how in general the KDE maps generated with the respective bandwidths looks like using the Gaussian kernel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_diggle <- density(sample_acled_ppp.km, bw.diggle(sample_acled_ppp.km))\nkde_CvL <- density(sample_acled_ppp.km, bw.CvL(sample_acled_ppp.km))\nkde_scott <- density(sample_acled_ppp.km, bw.scott(sample_acled_ppp.km))\nkde_ppl <- density(sample_acled_ppp.km, bw.ppl(sample_acled_ppp.km))\n\npar(mar = c(1,1,1,1.5),mfrow = c(2,2))\nplot(kde_diggle,main = \"kde_diggle\")\nplot(kde_CvL,main = \"kde_CvL\")\nplot(kde_scott,main = \"kde_scott\")\nplot(kde_ppl,main = \"kde_ppl\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n#### 3.4.2.2 Comparing KDE Results Across Different Bandwidths and Kernels\n\nThe code chunk below plots different KDE plots for a various different pairings of kernels and bandwidths.\n\n::: panel-tabset\n## bw.ppl\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n## bw.diggle\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n## bw.CvL\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n## bw.scott\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n:::\n\nAfter evaluating the KDE plots, I opted for the **Gaussian kernel** with the bandwidth provided by `bw.ppl` because this method provided a more localized smoothing effect, better capturing the spatial patterns in the data. In comparison, the `bw.CvL` method yielded a much larger bandwidth, leading to excessive smoothing, while `bw.scott` showed considerable disparity between x and y dimensions, suggesting anisotropic smoothing. The `bw.diggle` method, though precise, resulted in very narrow smoothing that might overemphasize noise.\n\nDespite this, I found that the Gaussian KDE with `bw.ppl` still appeared to be undersmoothed. Consequently, further optimization is necessary to refine the bandwidth setting and achieve a more balanced density estimate that accurately represents the underlying spatial patterns in the data.\n\n------------------------------------------------------------------------\n\n### 3.4.3 Fine-Tuning KDE Parameters\n\nSince the Gaussian KDE using `bw.ppl` seems to be undersmoothed, we will need to adjust the sigma to achieve the desired results. To address this undersmoothing issue, we can increase the sigma value to widen the smoothing window, as demonstrated below. Through continued experimentation, we have determined these final parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadjusted_bw <- bw.ppl(sample_acled_ppp.km) * 1.5\nkde_adjusted <- density(sample_acled_ppp.km, sigma=adjusted_bw, edge=TRUE, kernel=\"gaussian\")\nplot(kde_adjusted)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n\nHere is a comparison between the point pattern and the KDE plot of the sample data, this comparison allows us to evaluate how effectively the KDE captures the spatial distribution of the events and highlights areas where the KDE might need further refinement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(1,0,1,0))\npar(mfrow=c(1,2))\nplot(sample_acled_ppp, pch = 16, cex = 0.5) \nplot(kde_adjusted)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nValue of the adjusted bandwidth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadjusted_bw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n31.80771 \n```\n\n\n:::\n:::\n\n\n# 4. Quarterly KDE Layers\n\n## 4.1 2021\n\n### 4.1.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=1344}\n:::\n:::\n\n\n### 4.1.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-39-1.png){width=1344}\n:::\n:::\n\n\n### 4.1.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=1344}\n:::\n:::\n\n\n### 4.1.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=1344}\n:::\n:::\n\n\n## 4.2 2022\n\n### 4.2.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=1344}\n:::\n:::\n\n\n## 4.3 2023\n\n### 4.3.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-46-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-47-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-48-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-49-1.png){width=1344}\n:::\n:::\n\n\n## 4.4 2024\n\n### 4.4.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2024\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=1344}\n:::\n:::\n\n\n### 4.4.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2024\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-51-1.png){width=1344}\n:::\n:::\n\n\n# 5. 2nd-Order Spatial Point Patterns Analysis\n\nIn this section, we will conduct second-order spatial point pattern analysis (PPA), which examines interactions between events at various spatial scales. By using statistical functions such as G, F, K, and L, we can quantify and explore clustering patterns, distances between events, and the spatial distribution of points relative to a given area. These functions help reveal whether the events exhibit random, clustered, or regular patterns, providing deeper insights into the underlying spatial structure of conflict events in Myanmar.\n\nHere’s a detailed description of the second-order spatial point pattern analysis functions:\n\n-   **G-function (Nearest Neighbor Distribution Function)**: The G-function describes the cumulative distribution of the distances from each event to its nearest neighboring event. It highlights how clustered events are by comparing observed distances with those expected from a random spatial pattern.\n\n-   **F-function (Empty Space Function)**: The F-function examines the distribution of distances from arbitrary (random) locations to the nearest event. It helps in evaluating how well events fill the study area. A large gap between random points and events indicates spatial heterogeneity or clustering.\n\n-   **K-function (Ripley’s K-function)**: This function estimates the number of events within a certain distance of each other, relative to what would be expected under complete spatial randomness (CSR). It accumulates the number of events within varying distances, thus detecting clustering or dispersion at multiple spatial scales. If the observed K-function is higher than expected under CSR, it indicates clustering.\n\n-   **L-function (Besag’s L-function)**: The L-function is a variance-stabilized transformation of the K-function. It linearizes the expected K-values, making it easier to interpret deviations from randomness. An L-function above the CSR line indicates clustering, while values below suggest dispersion.\n\n## 5.1 Analysis Background\n\nFor this analysis, I will be primarily using the **G-function** to conduct second-order spatial point pattern analysis. I chose it for its computational efficiency, straightforward interpretation of nearest-neighbor distances, and suitability for analyzing a single type of event. The K and L-functions, while valuable, are more resource-intensive and complex to interpret, while the F-function is less applicable to our single-type event analysis.\n\n### 5.1.1 Monte Carlo Simulation\n\nI will also be conducting a Monte Carlo simulation for testing **Complete Spatial Randomness (CSR)** in the spatial distribution of conflict events. This involves generating multiple random point patterns under CSR to create a range of expected spatial statistics. By comparing the observed G-function of the conflict events against these simulated envelopes, I can determine if the observed clustering or dispersion is significantly different from what would be expected by chance.\n\nThe envelope function provides upper and lower bounds for the G-function, helping to assess whether the spatial pattern of conflict events is significantly clustered or dispersed compared to random patterns. This method ensures a rigorous evaluation of spatial randomness and enhances the interpretation of observed patterns.\n\n### 5.1.2 Example of G-Function Plot\n\nThis code snippet below provides an example of a G-function plot of a sample of the data, calculated using an envelope derived from 99 simulations. This approach is used to evaluate the spatial distribution of events and assess how the observed point pattern compares to what might be expected under complete spatial randomness. Note that we will be using a set seed to ensure the reproducibility of our code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\ntest_second_sf <- grped_acled_sf %>% filter(event_type == \"Battles\", year == 2023, quarter ==2)\ntest_second_ppp<-as.ppp(st_coordinates(test_second_sf), st_bbox(test_second_sf))\n\nif(any(duplicated(test_second_ppp))){\n  test_second_ppp <- rjitter(test_second_ppp, retry=TRUE, nsim=1, drop=TRUE)\n}\n\ntest_second_ppp <- test_second_ppp[mmr_owin]\ntest_second.csr <- envelope(test_second_ppp, Gest, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(test_second.csr, xlim=c(0,10000), main=\"Example of G-Function Plot\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nThe plot typically shows several key elements related to both the observed data and the simulated patterns:\n\n-   **G\\^obs (Observed G-function)**:This represents the **empirical G-function** calculated from your actual point pattern data. It shows the cumulative distribution of the nearest-neighbor distances between points in the dataset.\n\n-   **G\\^theo (Theoretical G-function)**: **Theoretical G-function** that would be expected if the point pattern follows **Complete Spatial Randomness (CSR)**. Under CSR, the points are distributed independently and uniformly across the study area.\n\n-   **G\\^hi (Upper Envelope)**:\n\n    -   **Upper bound** of the G-function values generated from the random simulations (based on `nsim`, the number of simulations). It defines the maximum value that the G-function could take under CSR in these simulations.\n\n    -   If the observed G-function (G\\^obs) exceeds G\\^hi, it suggests **clustering**—points are closer together than expected by chance.\n\n-   **G\\^lo (Lower Envelope)**:\n\n    -   **Lower bound** of the G-function values from the random simulations. It defines the minimum G-function value expected under CSR.\n\n    -   If the observed G-function (G\\^obs) falls below G\\^lo, it suggests **dispersion** or **regularity**—points are more evenly spaced than expected by chance.\n:::\n\n## 5.2 Whole of Myanmar\n\n### 5.2.1 Battles\n\nThis chunk of code generates a G-function plot for all quarters of a particular event, using an envelope derived from 99 simulations for significance testing. Then, it saves the results to a list to plot it later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nbattle_data_sf <- grped_acled_sf %>% filter(event_type == \"Battles\")\n\n# Initialize an empty list to store the results\nbattle_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(battle_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- battle_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  battle_G_CK_list[[name]] <- G_CK.csr\n}\n\nwrite_rds(battle_G_CK_list, \"data/rds/battle_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n\nThis chunk of code plots the G-function plot for all quarters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(battle_G_CK_list)) {\n  g_ck <- battle_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(battle_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-55-1.png){width=1344}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  plot(battle_G_CK_list[[8]], xlim=c(0,10000), main=names(battle_G_CK_list)[8])\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n### 5.2.2 Explosions/Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nexplosions_data_sf <- grped_acled_sf %>% filter(event_type == \"Explosions/Remote violence\")\n\n# Initialize an empty list to store the results\nexplosions_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(explosions_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- explosions_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  explosions_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(explosions_G_CK_list, \"data/rds/explosions_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(explosions_G_CK_list)) {\n  g_ck <- explosions_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(explosions_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.3 Strategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nstrategic_data_sf <- grped_acled_sf %>% filter(event_type == \"Strategic developments\")\n\n# Initialize an empty list to store the results\nstrategic_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(strategic_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- strategic_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  strategic_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(strategic_G_CK_list, \"data/rds/strategic_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(strategic_G_CK_list)) {\n  g_ck <- strategic_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(strategic_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-62-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.4 Violence Against Citizens\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nviolence_data_sf <- grped_acled_sf %>% filter(event_type == \"Violence against civilians\")\n\n# Initialize an empty list to store the results\nviolence_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(violence_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- violence_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  violence_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(violence_G_CK_list, \"data/rds/violence_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(violence_G_CK_list)) {\n  g_ck <- violence_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(violence_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-65-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.5 Insights\n\n-   All of the observed G-function lines are way above the envelope, suggesting that the points, in this case the conflicts, are **more clustered** than expected under CSR. This means that the distribution of the conflicts is not at random and that tends to cluster in specific regions\n\n-   The slope of the observed G-function generally shows a **smooth and constant trend**, with the exception of data from 2021 Q1. This anomaly can be attributed to the fact that conflicts were just beginning to emerge during this period, resulting in a sparse distribution of conflict events. As a result, the G-function for this early quarter might reflect less pronounced clustering or dispersion compared to later periods when the conflict events became more frequent and widespread.\n\n-   The estimated/theoretical G function are all within the envelope, this indicates that the observed spatial distribution of points is not significantly different from what would be expected under a random distribution, suggesting that the observed patterns do not show strong evidence of non-random spatial structure.\n\n## 5.3 Sagaing\n\n## 5.4 Yangon\n\n# 6. Quarterly Spatio-Temporal KDE Layers\n\nIn this section, we will be conducting spatiotemporal Kernel Density Estimation (KDE). This approach allows us to visualize and analyze the density of conflicts over both space and time, providing a comprehensive view of how conflict activity evolves. By applying KDE to the dataset spanning from 2021 to 2024, we can identify hotspots and trends in conflict intensity across different quarters and regions.\n\n## 6.1 Battles\n\n### 6.1.1 Overview\n\nThis chunk of code utilizes `spattemp.density()` to compute the spatiotemporal KDE for all 14 quarters from 2021 to 2024 Q2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Battles\"\n  \n  # Filter the data\n  battle_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n  )\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(battle_data_sf), st_bbox(battle_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n\n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-66-1.png){width=1344}\n:::\n:::\n\n\n### 6.1.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Battles\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-69-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-70-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-71-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.2 Explosions/Remote violence\n\n### 6.2.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Explosions/Remote violence\"\n\n  # Filter the data\n  explosions_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(explosions_data_sf), st_bbox(explosions_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-72-1.png){width=1344}\n:::\n:::\n\n\n### 6.2.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Explosions/Remote violence\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-74-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-75-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-76-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-77-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.3 Strategic developments\n\n### 6.3.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Strategic developments\"\n  \n  # Filter the data\n  strategic_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(strategic_data_sf), st_bbox(strategic_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-78-1.png){width=1344}\n:::\n:::\n\n\n### 6.3.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Strategic developments\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-80-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-81-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-82-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-83-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.4 Violence against civilians\n\n### 6.4.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Violence against civilians\"\n  # Filter the data\n  violence_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(violence_data_sf), st_bbox(violence_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-84-1.png){width=1344}\n:::\n:::\n\n\n### 6.4.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Violence against civilians\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-89-1.png){width=1344}\n:::\n:::\n\n:::\n\n# 7. 2nd-Order Spatio-temporal Point Patterns Analysis\n\nThe specific questions we aim to address are whether the locations of conflict in Myanmar are spatially and spatio-temporally independent. Using second-order spatio-temporal point pattern analysis, we will examine if the conflicts exhibit significant clustering or dispersion across geographic areas and over time. This analysis will determine whether the observed spatial patterns and temporal distributions of conflicts deviate from what would be expected under Complete Spatial Randomness (CSR) and Complete Spatio-Temporal Randomness (CSTR). By identifying areas and periods of heightened conflict activity, we aim to understand if the patterns are random or reflect underlying spatial and temporal processes, providing insights into the dynamics of conflict distribution.\n\n## 7.1 Battles\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  current_event = \"Battles\"\n\n  # Filter the data\n  battles_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(battles_data_sf), st_bbox(battles_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  summary(spattemp_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  6271 points\nAverage intensity 9.497864e-09 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   5.000   8.000   8.314  11.000  14.000 \n\nWindow: polygonal boundary\n499 separate polygons (496 holes)\n                   vertices         area relative.area\npolygon 1             37587  6.60254e+11      1.00e+00\npolygon 2 (hole)          4 -2.89739e-02     -4.39e-14\npolygon 3 (hole)          5 -7.39370e-02     -1.12e-13\npolygon 4 (hole)          6 -1.08246e-01     -1.64e-13\npolygon 5 (hole)          4 -3.79114e-02     -5.74e-14\npolygon 6 (hole)          4 -7.60914e-02     -1.15e-13\npolygon 7 (hole)         13 -3.27066e-01     -4.95e-13\npolygon 8 (hole)          4 -5.05161e-02     -7.65e-14\npolygon 9 (hole)          6 -5.51163e-06     -8.35e-18\npolygon 10 (hole)         3 -1.20295e-06     -1.82e-18\npolygon 11 (hole)         4 -4.71409e-07     -7.14e-19\npolygon 12 (hole)         5 -1.77169e-06     -2.68e-18\npolygon 13 (hole)         3 -7.17198e-07     -1.09e-18\npolygon 14 (hole)         3 -3.55793e-08     -5.39e-20\npolygon 15 (hole)         3 -1.62627e-08     -2.46e-20\npolygon 16 (hole)         4 -2.16284e-06     -3.28e-18\npolygon 17 (hole)         4 -4.28513e-07     -6.49e-19\npolygon 18 (hole)         7 -1.20302e-06     -1.82e-18\npolygon 19 (hole)         4 -7.27613e-07     -1.10e-18\npolygon 20 (hole)         4 -2.03023e-06     -3.07e-18\npolygon 21 (hole)         3 -4.25914e-08     -6.45e-20\npolygon 22 (hole)         3 -1.20795e-08     -1.83e-20\npolygon 23 (hole)         3 -2.30578e-07     -3.49e-19\npolygon 24 (hole)         4 -2.38113e-07     -3.61e-19\npolygon 25 (hole)         6 -3.66160e-07     -5.55e-19\npolygon 26 (hole)         4 -1.71466e-07     -2.60e-19\npolygon 27 (hole)         5 -2.84569e-06     -4.31e-18\npolygon 28 (hole)         3 -2.16935e-08     -3.29e-20\npolygon 29 (hole)         3 -2.11139e-08     -3.20e-20\npolygon 30 (hole)         3 -5.34420e-09     -8.09e-21\npolygon 31 (hole)         4 -5.77791e-07     -8.75e-19\npolygon 32 (hole)         8 -3.13119e-06     -4.74e-18\npolygon 33 (hole)         4 -2.58312e-08     -3.91e-20\npolygon 34 (hole)         3 -1.99418e-06     -3.02e-18\npolygon 35 (hole)         4 -1.16159e-06     -1.76e-18\npolygon 36 (hole)         3 -1.16274e-09     -1.76e-21\npolygon 37 (hole)         4 -7.75080e-07     -1.17e-18\npolygon 38 (hole)         4 -8.06059e-07     -1.22e-18\npolygon 39 (hole)         3 -3.45366e-06     -5.23e-18\npolygon 40 (hole)         3 -9.74032e-08     -1.48e-19\npolygon 41 (hole)         4 -3.64604e-07     -5.52e-19\npolygon 42 (hole)         4 -3.28043e-07     -4.97e-19\npolygon 43 (hole)         3 -5.01126e-09     -7.59e-21\npolygon 44 (hole)         3 -8.03334e-08     -1.22e-19\npolygon 45 (hole)         4 -3.84815e-06     -5.83e-18\npolygon 46 (hole)         4 -4.53290e-07     -6.87e-19\npolygon 47 (hole)         4 -5.64805e-07     -8.55e-19\npolygon 48 (hole)         4 -3.30448e-06     -5.00e-18\npolygon 49 (hole)         3 -7.98544e-07     -1.21e-18\npolygon 50 (hole)         3 -3.63891e-09     -5.51e-21\npolygon 51 (hole)         5 -3.53322e-07     -5.35e-19\npolygon 52 (hole)         4 -6.70685e-07     -1.02e-18\npolygon 53 (hole)         4 -1.39906e-07     -2.12e-19\npolygon 54 (hole)         6 -2.04162e-06     -3.09e-18\npolygon 55 (hole)         4 -2.97332e-07     -4.50e-19\npolygon 56 (hole)         3 -3.07595e-08     -4.66e-20\npolygon 57 (hole)         4 -9.33665e-07     -1.41e-18\npolygon 58                3  1.81585e-12      2.75e-24\npolygon 59 (hole)         3 -1.07118e-07     -1.62e-19\npolygon 60 (hole)         4 -6.11381e-07     -9.26e-19\npolygon 61 (hole)         4 -1.12553e-07     -1.70e-19\npolygon 62 (hole)         4 -8.84941e-08     -1.34e-19\npolygon 63 (hole)         3 -8.99690e-09     -1.36e-20\npolygon 64 (hole)         4 -4.58192e-07     -6.94e-19\npolygon 65 (hole)         4 -2.08038e-09     -3.15e-21\npolygon 66 (hole)         4 -1.36234e-06     -2.06e-18\npolygon 67 (hole)         5 -2.67052e-06     -4.04e-18\npolygon 68 (hole)         3 -2.95859e-08     -4.48e-20\npolygon 69 (hole)         3 -1.17551e-06     -1.78e-18\npolygon 70 (hole)         6 -3.27559e-06     -4.96e-18\npolygon 71 (hole)         4 -3.30359e-07     -5.00e-19\npolygon 72 (hole)         3 -4.27785e-07     -6.48e-19\npolygon 73 (hole)         4 -2.18080e-06     -3.30e-18\npolygon 74 (hole)         5 -7.04188e-06     -1.07e-17\npolygon 75 (hole)         6 -4.09110e-06     -6.20e-18\npolygon 76 (hole)         3 -7.42689e-08     -1.12e-19\npolygon 77 (hole)         4 -1.89486e-06     -2.87e-18\npolygon 78 (hole)         4 -5.69373e-07     -8.62e-19\npolygon 79 (hole)         3 -1.47396e-06     -2.23e-18\npolygon 80 (hole)         5 -1.29833e-06     -1.97e-18\npolygon 81 (hole)         4 -2.09495e-08     -3.17e-20\npolygon 82 (hole)         3 -1.61855e-08     -2.45e-20\npolygon 83 (hole)         4 -5.65546e-07     -8.57e-19\npolygon 84 (hole)         3 -1.18631e-08     -1.80e-20\npolygon 85 (hole)         4 -5.69871e-07     -8.63e-19\npolygon 86 (hole)         4 -8.37661e-07     -1.27e-18\npolygon 87 (hole)         4 -2.08298e-07     -3.15e-19\npolygon 88 (hole)         4 -2.04943e-07     -3.10e-19\npolygon 89 (hole)         3 -7.55924e-09     -1.14e-20\npolygon 90 (hole)         4 -2.10794e-09     -3.19e-21\npolygon 91 (hole)         5 -6.51946e-07     -9.87e-19\npolygon 92 (hole)         4 -7.82915e-07     -1.19e-18\npolygon 93 (hole)         4 -2.15905e-07     -3.27e-19\npolygon 94 (hole)         3 -2.25488e-08     -3.42e-20\npolygon 95 (hole)         4 -2.64827e-06     -4.01e-18\npolygon 96 (hole)        15 -2.06297e-05     -3.12e-17\npolygon 97 (hole)         4 -4.42579e-07     -6.70e-19\npolygon 98 (hole)         4 -5.27339e-06     -7.99e-18\npolygon 99 (hole)         6 -6.26346e-06     -9.49e-18\npolygon 100 (hole)        4 -6.27155e-06     -9.50e-18\npolygon 101 (hole)        4 -3.59313e-06     -5.44e-18\npolygon 102 (hole)        4 -5.00842e-08     -7.59e-20\npolygon 103 (hole)        3 -7.53985e-09     -1.14e-20\npolygon 104 (hole)        4 -2.64966e-07     -4.01e-19\npolygon 105 (hole)       10 -5.92802e-06     -8.98e-18\npolygon 106 (hole)        3 -3.39743e-06     -5.15e-18\npolygon 107 (hole)        4 -4.12443e-07     -6.25e-19\npolygon 108 (hole)        8 -4.71206e-06     -7.14e-18\npolygon 109 (hole)        3 -6.29672e-07     -9.54e-19\npolygon 110 (hole)        4 -1.65113e-07     -2.50e-19\npolygon 111 (hole)        3 -2.27015e-10     -3.44e-22\npolygon 112 (hole)       10 -1.48837e-06     -2.25e-18\npolygon 113 (hole)        3 -3.95619e-08     -5.99e-20\npolygon 114 (hole)        3 -7.62534e-10     -1.15e-21\npolygon 115 (hole)        3 -3.84605e-08     -5.83e-20\npolygon 116 (hole)        3 -2.05258e-07     -3.11e-19\npolygon 117 (hole)        4 -4.59048e-07     -6.95e-19\npolygon 118 (hole)        3 -3.47067e-07     -5.26e-19\npolygon 119 (hole)        3 -2.24442e-07     -3.40e-19\npolygon 120 (hole)        4 -3.10205e-07     -4.70e-19\npolygon 121 (hole)        3 -1.28407e-08     -1.94e-20\npolygon 122 (hole)        4 -8.18033e-07     -1.24e-18\npolygon 123 (hole)        4 -5.49479e-12     -8.32e-24\npolygon 124 (hole)        4 -1.34642e-07     -2.04e-19\npolygon 125 (hole)        4 -7.58533e-07     -1.15e-18\npolygon 126 (hole)        4 -3.75715e-07     -5.69e-19\npolygon 127 (hole)        4 -4.44168e-07     -6.73e-19\npolygon 128 (hole)        4 -1.37337e-06     -2.08e-18\npolygon 129 (hole)        4 -3.83993e-06     -5.82e-18\npolygon 130 (hole)        3 -1.56637e-06     -2.37e-18\npolygon 131 (hole)        4 -4.23450e-08     -6.41e-20\npolygon 132 (hole)        4 -7.88436e-08     -1.19e-19\npolygon 133 (hole)        5 -6.25364e-07     -9.47e-19\npolygon 134 (hole)        4 -4.68762e-09     -7.10e-21\npolygon 135 (hole)        3 -3.00387e-07     -4.55e-19\npolygon 136 (hole)        3 -1.99453e-08     -3.02e-20\npolygon 137 (hole)        4 -5.49640e-07     -8.32e-19\npolygon 138 (hole)        5 -1.31982e-06     -2.00e-18\npolygon 139 (hole)        3 -5.34717e-10     -8.10e-22\npolygon 140 (hole)        3 -2.04914e-09     -3.10e-21\npolygon 141 (hole)        3 -1.38789e-07     -2.10e-19\npolygon 142 (hole)        3 -1.07277e-06     -1.62e-18\npolygon 143 (hole)        3 -4.31201e-07     -6.53e-19\npolygon 144 (hole)        4 -3.49222e-07     -5.29e-19\npolygon 145 (hole)        3 -2.47267e-08     -3.75e-20\npolygon 146 (hole)        3 -3.22689e-08     -4.89e-20\npolygon 147 (hole)        3 -2.59159e-08     -3.93e-20\npolygon 148 (hole)        3 -1.20252e-07     -1.82e-19\npolygon 149 (hole)        3 -3.60845e-07     -5.47e-19\npolygon 150 (hole)        3 -2.32633e-08     -3.52e-20\npolygon 151 (hole)        4 -8.70251e-07     -1.32e-18\npolygon 152 (hole)        4 -1.82046e-06     -2.76e-18\npolygon 153 (hole)        3 -9.20920e-09     -1.39e-20\npolygon 154 (hole)        4 -1.04317e-06     -1.58e-18\npolygon 155 (hole)        9 -8.94908e-06     -1.36e-17\npolygon 156 (hole)        4 -1.59152e-06     -2.41e-18\npolygon 157 (hole)        5 -8.68713e-07     -1.32e-18\npolygon 158 (hole)        6 -5.29290e-06     -8.02e-18\npolygon 159 (hole)        6 -3.84436e-06     -5.82e-18\npolygon 160 (hole)        6 -3.82258e-06     -5.79e-18\npolygon 161 (hole)        6 -4.11345e-06     -6.23e-18\npolygon 162 (hole)        3 -3.66826e-08     -5.56e-20\npolygon 163 (hole)        3 -6.84518e-08     -1.04e-19\npolygon 164 (hole)        4 -6.42929e-04     -9.74e-16\npolygon 165 (hole)        3 -2.52078e-03     -3.82e-15\npolygon 166 (hole)        3 -1.14711e-07     -1.74e-19\npolygon 167 (hole)        4 -3.14458e-08     -4.76e-20\npolygon 168 (hole)        4 -8.05924e-08     -1.22e-19\npolygon 169 (hole)        4 -3.50588e-02     -5.31e-14\npolygon 170               3  5.28475e-11      8.00e-23\npolygon 171 (hole)        4 -5.42875e-02     -8.22e-14\npolygon 172 (hole)        4 -1.16334e-07     -1.76e-19\npolygon 173 (hole)        6 -3.37212e-06     -5.11e-18\npolygon 174 (hole)        7 -9.86738e-07     -1.49e-18\npolygon 175 (hole)        3 -8.15884e-10     -1.24e-21\npolygon 176 (hole)        3 -3.17948e-08     -4.82e-20\npolygon 177 (hole)        8 -6.36344e-02     -9.64e-14\npolygon 178 (hole)        6 -7.57975e-02     -1.15e-13\npolygon 179 (hole)        4 -5.06714e-07     -7.67e-19\npolygon 180 (hole)        7 -5.87920e-06     -8.90e-18\npolygon 181 (hole)       10 -2.86140e-06     -4.33e-18\npolygon 182 (hole)        7 -1.06396e-06     -1.61e-18\npolygon 183 (hole)        3 -4.31917e-06     -6.54e-18\npolygon 184 (hole)        8 -1.08150e-06     -1.64e-18\npolygon 185 (hole)        3 -8.96754e-09     -1.36e-20\npolygon 186 (hole)       10 -2.61219e-06     -3.96e-18\npolygon 187 (hole)        6 -1.06955e-06     -1.62e-18\npolygon 188 (hole)        4 -1.89840e-07     -2.88e-19\npolygon 189 (hole)        4 -2.24224e-02     -3.40e-14\npolygon 190 (hole)        6 -1.10397e-07     -1.67e-19\npolygon 191 (hole)        4 -4.95947e-09     -7.51e-21\npolygon 192 (hole)        7 -2.04226e-06     -3.09e-18\npolygon 193 (hole)        5 -9.35664e-02     -1.42e-13\npolygon 194 (hole)        4 -5.26630e-08     -7.98e-20\npolygon 195 (hole)        4 -1.10599e-07     -1.68e-19\npolygon 196 (hole)       13 -1.39251e-01     -2.11e-13\npolygon 197 (hole)        3 -1.10225e-06     -1.67e-18\npolygon 198 (hole)        7 -1.46533e-01     -2.22e-13\npolygon 199 (hole)        6 -7.59070e-02     -1.15e-13\npolygon 200 (hole)        4 -4.87934e-03     -7.39e-15\npolygon 201 (hole)        6 -6.42552e-02     -9.73e-14\npolygon 202 (hole)        3 -2.79795e-04     -4.24e-16\npolygon 203 (hole)        4 -1.90641e-02     -2.89e-14\npolygon 204 (hole)       21 -1.86624e-01     -2.83e-13\npolygon 205 (hole)        6 -2.18823e-02     -3.31e-14\npolygon 206 (hole)        3 -1.69684e-02     -2.57e-14\npolygon 207 (hole)        4 -3.05430e-02     -4.63e-14\npolygon 208 (hole)        3 -1.73631e-02     -2.63e-14\npolygon 209 (hole)        5 -1.41820e-02     -2.15e-14\npolygon 210 (hole)       10 -6.15227e-02     -9.32e-14\npolygon 211 (hole)        4 -2.78853e-02     -4.22e-14\npolygon 212 (hole)        4 -1.19272e-03     -1.81e-15\npolygon 213 (hole)        8 -6.15579e-02     -9.32e-14\npolygon 214 (hole)        4 -1.02932e-02     -1.56e-14\npolygon 215 (hole)        4 -7.46409e-04     -1.13e-15\npolygon 216 (hole)        4 -1.05431e-02     -1.60e-14\npolygon 217 (hole)        7 -1.72082e-06     -2.61e-18\npolygon 218 (hole)        7 -2.46889e-06     -3.74e-18\npolygon 219 (hole)        4 -8.25150e-03     -1.25e-14\npolygon 220 (hole)        3 -2.15770e-07     -3.27e-19\npolygon 221 (hole)        6 -7.78385e-07     -1.18e-18\npolygon 222 (hole)        3 -2.59990e-02     -3.94e-14\npolygon 223 (hole)        3 -9.09759e-03     -1.38e-14\npolygon 224 (hole)        3 -1.96870e-02     -2.98e-14\npolygon 225 (hole)        3 -4.01475e-05     -6.08e-17\npolygon 226 (hole)        4 -9.23860e-03     -1.40e-14\npolygon 227 (hole)        5 -1.49420e-02     -2.26e-14\npolygon 228 (hole)        4 -1.10823e-02     -1.68e-14\npolygon 229 (hole)        4 -4.06421e-08     -6.16e-20\npolygon 230 (hole)        3 -2.71562e-02     -4.11e-14\npolygon 231 (hole)        4 -4.26735e-02     -6.46e-14\npolygon 232 (hole)        3 -2.21948e-08     -3.36e-20\npolygon 233 (hole)        4 -3.01744e-02     -4.57e-14\npolygon 234 (hole)        5 -8.18710e-07     -1.24e-18\npolygon 235 (hole)        3 -9.56497e-03     -1.45e-14\npolygon 236 (hole)        3 -4.68845e-08     -7.10e-20\npolygon 237 (hole)        4 -7.40983e-03     -1.12e-14\npolygon 238 (hole)        8 -1.54074e-01     -2.33e-13\npolygon 239 (hole)        3 -1.05617e-02     -1.60e-14\npolygon 240 (hole)        4 -1.05452e-06     -1.60e-18\npolygon 241 (hole)        4 -1.35181e-07     -2.05e-19\npolygon 242 (hole)        4 -1.45889e-08     -2.21e-20\npolygon 243 (hole)        4 -3.58903e-08     -5.44e-20\npolygon 244 (hole)        4 -5.15531e-03     -7.81e-15\npolygon 245 (hole)        5 -4.57466e-06     -6.93e-18\npolygon 246 (hole)        4 -2.04805e-07     -3.10e-19\npolygon 247 (hole)        6 -3.72405e-02     -5.64e-14\npolygon 248 (hole)        3 -3.39354e-07     -5.14e-19\npolygon 249 (hole)        3 -4.60616e-04     -6.98e-16\npolygon 250 (hole)        4 -3.03727e-02     -4.60e-14\npolygon 251 (hole)        4 -5.72616e-08     -8.67e-20\npolygon 252 (hole)        7 -4.08919e-02     -6.19e-14\npolygon 253 (hole)        4 -6.69856e-03     -1.01e-14\npolygon 254 (hole)        4 -1.15937e-02     -1.76e-14\npolygon 255 (hole)        4 -6.45287e-07     -9.77e-19\npolygon 256 (hole)        4 -3.11046e-03     -4.71e-15\npolygon 257 (hole)       12 -1.45689e-01     -2.21e-13\npolygon 258 (hole)        6 -6.22064e-07     -9.42e-19\npolygon 259 (hole)        4 -1.41344e-07     -2.14e-19\npolygon 260 (hole)        3 -6.12426e-07     -9.28e-19\npolygon 261 (hole)        8 -6.23357e-06     -9.44e-18\npolygon 262 (hole)        4 -5.64800e-02     -8.55e-14\npolygon 263 (hole)        3 -1.11189e-02     -1.68e-14\npolygon 264 (hole)        9 -6.45354e-02     -9.77e-14\npolygon 265 (hole)        3 -1.66752e-07     -2.53e-19\npolygon 266 (hole)        4 -2.05954e-09     -3.12e-21\npolygon 267 (hole)        3 -5.29025e-08     -8.01e-20\npolygon 268 (hole)        4 -2.60006e-02     -3.94e-14\npolygon 269 (hole)        3 -9.86363e-12     -1.49e-23\npolygon 270 (hole)        4 -2.21200e-10     -3.35e-22\npolygon 271 (hole)        4 -1.05817e-07     -1.60e-19\npolygon 272 (hole)        3 -1.44747e-11     -2.19e-23\npolygon 273 (hole)        4 -1.00948e-02     -1.53e-14\npolygon 274 (hole)        6 -6.16845e-02     -9.34e-14\npolygon 275 (hole)        6 -4.18472e-02     -6.34e-14\npolygon 276 (hole)        4 -3.50422e-03     -5.31e-15\npolygon 277 (hole)        8 -6.19515e-02     -9.38e-14\npolygon 278 (hole)        4 -1.86351e-02     -2.82e-14\npolygon 279 (hole)        9 -4.78526e-02     -7.25e-14\npolygon 280 (hole)        4 -1.58208e-04     -2.40e-16\npolygon 281 (hole)        4 -3.64951e-07     -5.53e-19\npolygon 282 (hole)        4 -9.07721e-06     -1.37e-17\npolygon 283 (hole)        4 -6.73612e-03     -1.02e-14\npolygon 284 (hole)        4 -5.08766e-07     -7.71e-19\npolygon 285 (hole)        4 -1.32468e-07     -2.01e-19\npolygon 286 (hole)        4 -1.43348e-09     -2.17e-21\npolygon 287 (hole)        4 -1.82698e-08     -2.77e-20\npolygon 288 (hole)        3 -5.59969e-07     -8.48e-19\npolygon 289 (hole)        4 -5.36782e-03     -8.13e-15\npolygon 290 (hole)        3 -8.82833e-04     -1.34e-15\npolygon 291 (hole)        3 -1.42622e-02     -2.16e-14\npolygon 292 (hole)        4 -4.38078e-03     -6.63e-15\npolygon 293 (hole)        4 -1.36409e-02     -2.07e-14\npolygon 294 (hole)        4 -3.84271e-02     -5.82e-14\npolygon 295 (hole)        3 -7.56650e-03     -1.15e-14\npolygon 296 (hole)        4 -8.04110e-03     -1.22e-14\npolygon 297 (hole)        6 -2.53481e-02     -3.84e-14\npolygon 298 (hole)        5 -5.31928e-02     -8.06e-14\npolygon 299 (hole)        4 -1.15603e-02     -1.75e-14\npolygon 300 (hole)        3 -2.16578e-03     -3.28e-15\npolygon 301 (hole)        6 -4.67378e-02     -7.08e-14\npolygon 302 (hole)        3 -2.87542e-03     -4.36e-15\npolygon 303 (hole)        4 -5.42478e-02     -8.22e-14\npolygon 304 (hole)        3 -4.75090e-03     -7.20e-15\npolygon 305 (hole)        4 -3.45047e-02     -5.23e-14\npolygon 306 (hole)        3 -5.74480e-03     -8.70e-15\npolygon 307 (hole)        3 -1.45991e-03     -2.21e-15\npolygon 308 (hole)        4 -2.01300e-02     -3.05e-14\npolygon 309 (hole)        4 -2.58840e-02     -3.92e-14\npolygon 310 (hole)       10 -9.35297e-02     -1.42e-13\npolygon 311 (hole)        6 -7.33564e-02     -1.11e-13\npolygon 312 (hole)        3 -6.63154e-03     -1.00e-14\npolygon 313 (hole)        4 -1.30938e-03     -1.98e-15\npolygon 314 (hole)        5 -9.92215e-03     -1.50e-14\npolygon 315 (hole)        4 -9.32013e-03     -1.41e-14\npolygon 316 (hole)        3 -2.44391e-07     -3.70e-19\npolygon 317 (hole)        4 -2.73889e-02     -4.15e-14\npolygon 318 (hole)        3 -1.15109e-02     -1.74e-14\npolygon 319 (hole)        4 -8.77810e-02     -1.33e-13\npolygon 320 (hole)        6 -8.99139e-02     -1.36e-13\npolygon 321 (hole)        4 -1.76462e-02     -2.67e-14\npolygon 322 (hole)        4 -5.14884e-02     -7.80e-14\npolygon 323 (hole)        3 -1.43940e-03     -2.18e-15\npolygon 324 (hole)        7 -1.69870e-01     -2.57e-13\npolygon 325 (hole)        6 -1.03665e-01     -1.57e-13\npolygon 326 (hole)        5 -8.20727e-02     -1.24e-13\npolygon 327 (hole)        8 -1.72221e-01     -2.61e-13\npolygon 328 (hole)       20 -6.05941e-01     -9.18e-13\npolygon 329 (hole)        4 -3.84352e-02     -5.82e-14\npolygon 330 (hole)        3 -6.39744e-03     -9.69e-15\npolygon 331 (hole)        4 -5.95216e-02     -9.01e-14\npolygon 332 (hole)        3 -1.48932e-02     -2.26e-14\npolygon 333 (hole)        4 -7.02081e-02     -1.06e-13\npolygon 334 (hole)        9 -2.86418e-01     -4.34e-13\npolygon 335 (hole)        3 -1.64303e-06     -2.49e-18\npolygon 336 (hole)        5 -3.32767e-02     -5.04e-14\npolygon 337 (hole)       10 -1.98344e-01     -3.00e-13\npolygon 338 (hole)        4 -2.27610e-02     -3.45e-14\npolygon 339 (hole)        3 -1.19060e-02     -1.80e-14\npolygon 340 (hole)        5 -7.52008e-04     -1.14e-15\npolygon 341 (hole)        8 -1.33113e-02     -2.02e-14\npolygon 342 (hole)        6 -2.76240e-02     -4.18e-14\npolygon 343 (hole)        3 -3.74154e-02     -5.67e-14\npolygon 344 (hole)        3 -2.72933e-02     -4.13e-14\npolygon 345 (hole)        3 -1.16808e-02     -1.77e-14\npolygon 346 (hole)        6 -1.98638e-03     -3.01e-15\npolygon 347 (hole)        4 -9.91931e-02     -1.50e-13\npolygon 348 (hole)        4 -2.12075e-03     -3.21e-15\npolygon 349 (hole)        4 -7.90017e-02     -1.20e-13\npolygon 350 (hole)        3 -1.07902e-03     -1.63e-15\npolygon 351 (hole)        3 -8.74118e-04     -1.32e-15\npolygon 352 (hole)       10 -5.59537e-02     -8.47e-14\npolygon 353 (hole)        4 -1.45573e-02     -2.20e-14\npolygon 354 (hole)        4 -1.90718e-03     -2.89e-15\npolygon 355 (hole)        3 -7.26183e-03     -1.10e-14\npolygon 356 (hole)        3 -2.80771e-02     -4.25e-14\npolygon 357 (hole)        4 -1.16888e-03     -1.77e-15\npolygon 358 (hole)        4 -1.88745e-02     -2.86e-14\npolygon 359 (hole)        3 -4.14910e-03     -6.28e-15\npolygon 360 (hole)        3 -1.45605e-02     -2.21e-14\npolygon 361 (hole)        3 -2.28810e-02     -3.47e-14\npolygon 362 (hole)        5 -1.72617e-02     -2.61e-14\npolygon 363 (hole)        3 -4.96859e-03     -7.53e-15\npolygon 364 (hole)        4 -1.85807e-02     -2.81e-14\npolygon 365 (hole)        4 -8.61248e-03     -1.30e-14\npolygon 366 (hole)        3 -1.66646e-03     -2.52e-15\npolygon 367 (hole)        3 -3.56709e-03     -5.40e-15\npolygon 368 (hole)        4 -1.31137e-02     -1.99e-14\npolygon 369 (hole)        3 -1.78834e+02     -2.71e-10\npolygon 370 (hole)        5 -6.94016e-07     -1.05e-18\npolygon 371 (hole)        4 -2.72978e-06     -4.13e-18\npolygon 372 (hole)        4 -7.98842e-07     -1.21e-18\npolygon 373 (hole)        3 -2.40256e-08     -3.64e-20\npolygon 374 (hole)        4 -6.16418e-07     -9.34e-19\npolygon 375 (hole)        4 -2.35440e-07     -3.57e-19\npolygon 376 (hole)       10 -2.80798e-06     -4.25e-18\npolygon 377 (hole)        3 -8.34452e-09     -1.26e-20\npolygon 378 (hole)        4 -1.10734e-06     -1.68e-18\npolygon 379 (hole)        6 -1.93309e-06     -2.93e-18\npolygon 380 (hole)        4 -1.53094e-07     -2.32e-19\npolygon 381 (hole)       10 -7.07574e-06     -1.07e-17\npolygon 382 (hole)        6 -2.19247e-07     -3.32e-19\npolygon 383 (hole)        4 -2.80090e-07     -4.24e-19\npolygon 384 (hole)        4 -1.76501e-07     -2.67e-19\npolygon 385 (hole)        6 -7.12185e-07     -1.08e-18\npolygon 386 (hole)        4 -1.22645e-06     -1.86e-18\npolygon 387 (hole)        3 -2.16954e-08     -3.29e-20\npolygon 388 (hole)        4 -9.26922e-07     -1.40e-18\npolygon 389 (hole)        3 -1.25016e-07     -1.89e-19\npolygon 390 (hole)        4 -3.05785e-07     -4.63e-19\npolygon 391 (hole)        4 -2.80260e-07     -4.24e-19\npolygon 392 (hole)        4 -1.48387e-06     -2.25e-18\npolygon 393 (hole)       10 -4.43371e-06     -6.72e-18\npolygon 394 (hole)        4 -1.73061e-06     -2.62e-18\npolygon 395 (hole)        5 -1.26817e-06     -1.92e-18\npolygon 396 (hole)        6 -1.04627e-06     -1.58e-18\npolygon 397 (hole)        4 -1.43250e-07     -2.17e-19\npolygon 398 (hole)       10 -4.75949e-06     -7.21e-18\npolygon 399 (hole)        6 -8.78265e-07     -1.33e-18\npolygon 400 (hole)        3 -5.07085e-08     -7.68e-20\npolygon 401 (hole)        4 -4.49649e-07     -6.81e-19\npolygon 402 (hole)       14 -6.60894e-06     -1.00e-17\npolygon 403 (hole)        4 -1.90782e-07     -2.89e-19\npolygon 404 (hole)        3 -2.16499e-08     -3.28e-20\npolygon 405 (hole)        5 -7.90293e-07     -1.20e-18\npolygon 406 (hole)        4 -9.87001e-08     -1.49e-19\npolygon 407 (hole)        3 -1.97808e-08     -3.00e-20\npolygon 408 (hole)        4 -3.64406e-07     -5.52e-19\npolygon 409 (hole)        4 -2.26151e-07     -3.43e-19\npolygon 410 (hole)        8 -2.37591e-06     -3.60e-18\npolygon 411 (hole)        4 -7.08994e-08     -1.07e-19\npolygon 412 (hole)        5 -5.36412e-07     -8.12e-19\npolygon 413 (hole)        3 -7.80697e-08     -1.18e-19\npolygon 414 (hole)        4 -1.24601e-07     -1.89e-19\npolygon 415 (hole)        7 -1.04843e-06     -1.59e-18\npolygon 416 (hole)       10 -2.48372e-06     -3.76e-18\npolygon 417 (hole)        7 -7.39338e-07     -1.12e-18\npolygon 418 (hole)        3 -1.39154e-08     -2.11e-20\npolygon 419 (hole)        4 -2.98390e-07     -4.52e-19\npolygon 420 (hole)       12 -7.14870e-06     -1.08e-17\npolygon 421 (hole)        6 -5.27014e-07     -7.98e-19\npolygon 422 (hole)        8 -3.51801e-06     -5.33e-18\npolygon 423 (hole)        5 -5.89624e-07     -8.93e-19\npolygon 424 (hole)        4 -7.98025e-07     -1.21e-18\npolygon 425 (hole)        4 -2.64685e-07     -4.01e-19\npolygon 426 (hole)        4 -1.15092e-07     -1.74e-19\npolygon 427 (hole)        4 -4.34657e-07     -6.58e-19\npolygon 428 (hole)        3 -1.72229e-07     -2.61e-19\npolygon 429 (hole)        7 -6.14148e-06     -9.30e-18\npolygon 430 (hole)        3 -2.30886e-08     -3.50e-20\npolygon 431 (hole)        3 -6.45249e-09     -9.77e-21\npolygon 432 (hole)        4 -2.84863e-07     -4.31e-19\npolygon 433 (hole)        8 -3.03245e-06     -4.59e-18\npolygon 434 (hole)        4 -1.34343e-07     -2.03e-19\npolygon 435 (hole)        4 -8.93473e-09     -1.35e-20\npolygon 436 (hole)        4 -3.38666e-07     -5.13e-19\npolygon 437 (hole)        4 -6.23930e-07     -9.45e-19\npolygon 438 (hole)        4 -1.86883e-07     -2.83e-19\npolygon 439 (hole)        5 -4.21976e-07     -6.39e-19\npolygon 440 (hole)        3 -1.17994e-07     -1.79e-19\npolygon 441 (hole)        3 -3.07895e-08     -4.66e-20\npolygon 442 (hole)       14 -1.35873e-05     -2.06e-17\npolygon 443 (hole)        4 -2.45128e-07     -3.71e-19\npolygon 444 (hole)        5 -7.34751e-08     -1.11e-19\npolygon 445 (hole)        3 -2.82248e-08     -4.27e-20\npolygon 446 (hole)        6 -3.49821e-06     -5.30e-18\npolygon 447 (hole)        3 -2.71378e-09     -4.11e-21\npolygon 448 (hole)        8 -1.63456e-06     -2.48e-18\npolygon 449 (hole)        3 -3.50775e-08     -5.31e-20\npolygon 450 (hole)        4 -1.35920e-07     -2.06e-19\npolygon 451 (hole)        6 -1.47838e-06     -2.24e-18\npolygon 452 (hole)        4 -1.87035e-06     -2.83e-18\npolygon 453 (hole)        5 -7.03390e-07     -1.07e-18\npolygon 454 (hole)        6 -9.15230e-07     -1.39e-18\npolygon 455 (hole)        4 -7.15035e-07     -1.08e-18\npolygon 456 (hole)        6 -1.69286e-06     -2.56e-18\npolygon 457 (hole)        6 -1.50841e-06     -2.28e-18\npolygon 458 (hole)        6 -4.12997e-06     -6.26e-18\npolygon 459 (hole)        3 -6.60223e-07     -1.00e-18\npolygon 460 (hole)        4 -7.58527e-07     -1.15e-18\npolygon 461 (hole)        3 -4.76505e-07     -7.22e-19\npolygon 462 (hole)        4 -1.39555e-06     -2.11e-18\npolygon 463 (hole)        4 -3.54121e-06     -5.36e-18\npolygon 464 (hole)        4 -2.75846e-06     -4.18e-18\npolygon 465 (hole)        3 -2.32606e-09     -3.52e-21\npolygon 466 (hole)        4 -6.63980e-07     -1.01e-18\npolygon 467 (hole)       16 -1.17107e-05     -1.77e-17\npolygon 468 (hole)        4 -2.74825e-06     -4.16e-18\npolygon 469 (hole)        5 -4.24728e-07     -6.43e-19\npolygon 470 (hole)       25 -1.36711e-05     -2.07e-17\npolygon 471 (hole)        4 -8.42039e-07     -1.28e-18\npolygon 472 (hole)       10 -4.46563e-06     -6.76e-18\npolygon 473 (hole)        6 -7.11656e-07     -1.08e-18\npolygon 474 (hole)        3 -5.34484e-08     -8.10e-20\npolygon 475 (hole)        3 -4.37204e-08     -6.62e-20\npolygon 476 (hole)        6 -1.19852e-06     -1.82e-18\npolygon 477 (hole)        5 -1.19241e-07     -1.81e-19\npolygon 478 (hole)        4 -7.74701e-08     -1.17e-19\npolygon 479 (hole)        3 -1.83832e-07     -2.78e-19\npolygon 480 (hole)        3 -2.27509e-08     -3.45e-20\npolygon 481 (hole)        5 -9.65631e-07     -1.46e-18\npolygon 482 (hole)        3 -1.18691e-07     -1.80e-19\npolygon 483 (hole)        4 -4.67958e-08     -7.09e-20\npolygon 484 (hole)        3 -1.06249e-09     -1.61e-21\npolygon 485 (hole)        3 -6.87684e-09     -1.04e-20\npolygon 486 (hole)        3 -8.21567e-08     -1.24e-19\npolygon 487 (hole)        3 -3.45693e-09     -5.24e-21\npolygon 488 (hole)        3 -1.17099e-08     -1.77e-20\npolygon 489 (hole)        3 -1.66498e-10     -2.52e-22\npolygon 490 (hole)        3 -3.48620e-09     -5.28e-21\npolygon 491 (hole)        4 -5.47099e-07     -8.29e-19\npolygon 492 (hole)        4 -6.01888e-08     -9.12e-20\npolygon 493 (hole)        3 -1.22302e-08     -1.85e-20\npolygon 494 (hole)        4 -6.93602e-08     -1.05e-19\npolygon 495 (hole)        4 -4.56286e-07     -6.91e-19\npolygon 496 (hole)        4 -7.94834e-07     -1.20e-18\npolygon 497 (hole)        4 -1.33507e-06     -2.02e-18\npolygon 498 (hole)        3 -2.26252e+00     -3.43e-12\npolygon 499 (hole)        4 -4.12791e+00     -6.25e-12\nenclosing rectangle: [-210008.6, 724647.6] x [1102608.6, 3158467.1] units\n                     (934700 x 2056000 units)\nWindow area = 6.60254e+11 square units\nFraction of frame area: 0.344\n```\n\n\n:::\n:::\n\n\n# 8.\n\n# 9. Overall Insights\n\n# Drafts\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf),st_bbox(filtered_sf))\n    any(duplicated(filtered_ppp))\n\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Plot the KDE\n    plot(filtered_ppp, pch = 16, cex = 1,main = paste(current_event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-91-1.png){width=1344}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_year = 2021\n  current_quarter = 1\n  test_data <- acled_sf %>% filter(year == current_year, quarter == current_quarter,event_type==\"Violence against civilians\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(4,4))\n  strategic_data <- grped_acled_sf %>% filter(event_type == \"Strategic developments\")\n  # Loop through each combination of year and quarter\n  for (i in seq_len(nrow(strategic_data))) {\n    \n    filtered_sf <- strategic_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_year <- filtered_sf$year\n    current_quarter <- filtered_sf$quarter\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-93-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(2,1,2,1))\n  #par(mfrow=c(2,2))\n\n  battle_data_sf <- grped_acled_sf %>% filter(event_type == \"Battles\", year == 2024)\n\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(battle_data_sf), st_bbox(battle_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  # Rescale to kilometres\n  spattemp_ppp.km <- rescale.ppp(spattemp_ppp, 1000, \"km\")\n  \n  st_kde <- spattemp.density(spattemp_ppp.km)\n\n  plot(st_kde, 2, \n   override.par=FALSE, \n   fix.range=TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-94-1.png){width=960}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}