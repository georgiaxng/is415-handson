{
  "hash": "7ffa77743d2a022d6570bbf08b1c44f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"Georgia Ng\"\ndate: \"September 5, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Click to view the code\"\n---\n\n\n# 1. Overview\n\n## 1.1 Introduction\n\nSince early 2021, Myanmar has been engulfed in a brutal civil war that erupted following the military coup on February 1, 2021, which ousted the democratically elected government led by Aung San Suu Kyi. The coup ignited widespread protests and a civil disobedience movement across the country, escalating into armed resistance as various ethnic armed groups and newly formed militias began confronting the military junta. The conflict has led to severe humanitarian crises, including widespread violence, displacement, and human rights abuses. The military's response has been marked by extreme repression, including airstrikes and targeted attacks on civilian populations, exacerbating the suffering of ordinary Myanmar citizens. Despite international condemnation and calls for a return to democratic governance, the violence continues, deepening the political instability and socio-economic challenges faced by Myanmar.\n\nIn light of this ongoing crisis, I will be conducting a detailed geospatial analysis of the conflict events in Myanmar. This analysis aims to map and evaluate the spatial distribution and intensity of conflict incidents from 2021 to 2024. By utilizing geospatial techniques and spatial data, I will examine patterns of violence, identify hotspots of conflict, and assess the impact on civilian areas. This approach will provide valuable insights into the spatial dynamics of the conflict, helping to inform humanitarian responses and policy decisions.\n\n## 1.2 Goal\n\nWe will be focusing on 4 event types: **Battles, Explosion/Remote violence, [Strategic developments](https://acleddata.com/knowledge-base/strategic-developments-in-the-acled-dataset/), and Violence against civilians.**\n\n-   Using appropriate function of **sf** and **tidyverse** packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames.\n\n-   Using the geospatial data sets prepared, derive quarterly KDE layers.\n\n-   Using the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.\n\n-   Using the geospatial data sets prepared, derive quarterly spatio-temporal KDE layers.\n\n-   Using the geospatial data sets prepared, perform 2nd-Order Spatio-temporal Point Patterns Analysis.\n\n-   Using appropriate **tmap** functions, display the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.\n\n-   Describe the spatial patterns revealed by the KDE and Spatio-temporal KDE maps.1.1 The Data\n\n## 1.3 Importing of Packages\n\nBefore we start off, we will have to import the necessary packages required for us to conduct our analysis.\n\nWe will be using the following packages:\n\n-   **`sf`**: Manages spatial vector data, enabling operations like spatial joins, buffering, and transformations for points, lines, and polygons.\n\n-   **`raster`**: Handles raster data, allowing for operations such as raster calculations, resampling, and visualization of spatial grids (e.g., elevation or satellite images).\n\n-   **`spNetwork`**: Analyzes spatial networks by modeling connectivity and movement within networks like road systems or utility grids.\n\n-   **`tmap`**: Creates and customizes thematic maps for spatial data visualization, including static and interactive maps with various map elements.\n\n-   **`tidyverse`**: A suite of packages for data manipulation (`dplyr`), visualization (`ggplot2`), and tidying (`tidyr`), facilitating a streamlined workflow for data analysis.\n\n-   **`RColorBrewer`**: Provides a range of color palettes for effective and aesthetically pleasing data visualization, including options for categorical, sequential, and diverging data.\n\n-   **`spatstat`**: Conducts spatial statistics and analysis, including point pattern analysis and spatial simulations, to study spatial distributions and interactions.\n\n-   **`sparr`**: Facilitates the analysis of spatial point patterns and spatial autoregressive models. It includes functions for fitting and analyzing spatial point processes, particularly useful for examining spatial dependencies and interactions in point pattern data.\n\n-   `stpp` : Provides tools for spatio-temporal point pattern analysis, including methods for modeling and analyzing the interactions and distributions of points over both space and time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spNetwork, tmap, tidyverse, RColorBrewer, spatstat, sparr, stpp,lgcp)\n```\n:::\n\n\n## 1.4 The Data\n\nFor the purpose of this study, we will be using the following datasets. Particularly, I will be focusing on the quarterly armed conflict events from January 2021 until June 2024.\n\n-   Armed Conflict Location & Event Data of Myanmar between Jan 2021 to Jun 2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world.\n\n-   Myanmar State and Region Boundaries with Sub-region from [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)\n\n-   [OpenStreetMap datase](https://www.geofabrik.de/geofabrik/openstreetmap.html)t, which is an open-sourced geospatial dataset including shapefiles of important layers including road networks, forests, building footprints and many other points of interest.\n\n-   Myanmar District Boundaries from [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)\n\n# 2. Data Wrangling\n\n## 2.1 ACLED data\n\n### 2.1.1 Importing Data\n\nThe below chunk of code is used to import ACLED conflict data from a CSV file and convert it into a geospatial data frame using longitude and latitude as coordinates.\n\nIn order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system which is why in this case we will project it to `WGS84` with the crs code of `32647` using `st_transform`.\n\nSince the column `event_date` was stored as characters, `dmy()` is also used to format the `event_date` column into a standardized date format for further analysis.\n\n> `st_as_sf` is used to convert a data frame or other tabular data (like from CSVs, data frames, or tibbles) into a simple features (sf) object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\") %>% \n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"), crs = 4326) %>% \n  st_transform(crs= 32647)%>%\n  mutate(event_date = dmy(event_date))\n```\n:::\n\n\nNow, let us check the CRS again by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 2.1.2 Data Pruning and Structuring\n\n#### 2.1.2.1 Extracting Data for the 4 Main Event Types\n\nSince the data we have encapsulates all 6 types of events and we are only focusing on the 4 event types that I have indicated above, we will only be extracting the data related to that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  filter(event_type %in% c(\"Battles\", \"Strategic developments\", \"Violence against civilians\", \"Explosions/Remote violence\"))\n```\n:::\n\n\nUsing `unique()`, we can check that only rows that fall under the 4 event types have been kept.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(acled_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Strategic developments\"    \n[3] \"Violence against civilians\" \"Explosions/Remote violence\"\n```\n\n\n:::\n:::\n\n\n#### 2.1.2.2 Data Transformation for Quarterly Analysis\n\nSince we will be analyzing it by quarters, let's use `mutate()` to extract the information. Using `quarter()` from the `lubridate` package, we can derive the quarters from the event_date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>% mutate(quarter = quarter(event_date))\n```\n:::\n\n\nUsing `colnames()` we can see that the new column `quarter` is added.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acled_sf) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"geo_precision\"      \"source\"            \n[25] \"source_scale\"       \"notes\"              \"fatalities\"        \n[28] \"tags\"               \"timestamp\"          \"geometry\"          \n[31] \"quarter\"           \n```\n\n\n:::\n:::\n\n\n#### 2.1.2.3 Removal of Redundant Columns\n\nTo enhance the efficiency of our dataset, we will also remove redundant columns. This practice reduces memory usage and processing time while simplifying the analysis. By focusing on only the relevant data, we minimize complexity and ensure clearer, more focused results. Examples of the columns we will be removing are: `time_precision`, `inter1` etc. With this, we are able to reduce to a total of **20** columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define columns to be removed\ncolumns_to_remove <- c(\"time_precision\", \"inter1\", \"inter2\", \"iso\", \"source\", \"source_scale\", \"notes\", \"tags\", \"region\", \"geo_precision\", \"source_scale\",\"country\")\n\n# Remove columns only if they exist in the dataframe\nacled_sf <- acled_sf %>%\n  dplyr::select(-all_of(columns_to_remove[columns_to_remove %in% names(acled_sf)]))\n```\n:::\n\n\nThis is an overview of all the columns left:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"disorder_type\"      \"event_type\"         \"sub_event_type\"    \n [7] \"actor1\"             \"assoc_actor_1\"      \"actor2\"            \n[10] \"assoc_actor_2\"      \"interaction\"        \"civilian_targeting\"\n[13] \"admin1\"             \"admin2\"             \"admin3\"            \n[16] \"location\"           \"fatalities\"         \"timestamp\"         \n[19] \"geometry\"           \"quarter\"           \n```\n\n\n:::\n:::\n\n\n#### 2.1.2.4 Grouping of Data By Year, Quarter, Event Type\n\nThis chunk of code groups the ACLED Data by quarter, event and year, allowing us to better manage and access the data later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrped_acled_sf <- acled_sf %>%\n  group_by(year, quarter, event_type) %>%\n  summarize(event_count = n(), .groups = 'drop')\n```\n:::\n\n\n## 2.2 Myanmar Boundary and Sub-Region Dataset from MIMU\n\nThe code chunk below uses *`st_read()`* function of **sf** package to import `mmr_polbnda2_adm1_250k_mimu_1` shapefile into R as a polygon feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmrsr_sf <- st_read(dsn=\"data/geospatial/mmr_polbnda2_adm1_250k_mimu_1/\", \n                   layer=\"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/Take-home_Ex/Take-home_Ex01/data/geospatial/mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nAs shown below, currently the data is in geographic coordinate system (latitude/longitude), we will need to transform it to a projected CRS before proceeding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ID[\"EPSG\",6326]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433],\n        ID[\"EPSG\",8901]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic longitude\",east,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic latitude\",north,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmmrsr_sf <- st_transform(mmrsr_sf, crs = 32647)\nst_crs(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nTo check that all the spatial objects are valid, `st_is_valid()` is utilized. As shown below, all of the objects are valid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_valid(mmrsr_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\nThis is a brief overview of how the map of Myanmar looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mmrsr_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 2.3 Mapping the Geospatial data sets\n\nNow, let’s plot the spatial map to gain an initial understanding of the geographic distribution of all of the 4 conflict events by year. As observed, with such a large volume of data, identifying patterns through visual inspection alone can be challenging. This highlights the importance of conducting further analysis to uncover trends and achieve a deeper understanding of the spatial dynamics of these events.\n\nFrom a brief examination of the map, it’s evident that the region south of Sagaing exhibits the highest concentration of conflicts overall. This area shows a notably higher density of conflict events compared to other regions, marking it as a significant hotspot. However, to fully grasp these patterns and their implications, additional analysis is needed.\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2021\nacled_2021 <- acled_sf %>% filter(year == 2021)\n\n# Plot map for 2021\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2021) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2021\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2022\nacled_2022 <- acled_sf %>% filter(year == 2022)\n\n# Plot map for 2022\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2022) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2022\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2023\nacled_2023 <- acled_sf %>% filter(year == 2023)\n\n# Plot map for 2023\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2023) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2023\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for 2024\nacled_2024 <- acled_sf %>% filter(year == 2024)\n\n# Plot map for 2024\ntm_shape(mmrsr_sf) +\n  tm_polygons() + \n  tm_shape(acled_2024) + \n  tm_dots() +\n  tm_layout(main.title = \"ACLED Conflict Events in 2024\", main.title.size = 1.2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n:::\n\n## 2.4 Myanmar Sub-regions: For Reference and Context\n\nFor reference to the different sub-regions in Myanmar, we can refer to the labelled map plotted below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_colors <- length(unique(mmrsr_sf$ST))\ncolors <- brewer.pal(n = num_colors, name = \"Set3\")\n\ntm_shape(mmrsr_sf) +\n  tm_polygons(col = \"ST\", palette = colors) +  # Apply color palette to polygons\n  tm_text(\"ST\", size = 1, col = \"black\", bg.color = \"white\", just = c(\"center\", \"center\"),  xmod = 0, ymod = 0) + tm_layout(main.title = \"Myanmar\",\n            main.title.position = \"center\",\n            main.title.size = 1.6,\n            legend.outside = TRUE,\n            frame = TRUE)+\n    tm_legend(title = \"Sub-regions\")  # Set custom legend title\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## 2.5 Myanmar District Data\n\nThis chunk of code imports the geospatial data for the districts of Myanmar from MIMU.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmrsr_district_sf <- st_read(dsn=\"data/geospatial/mmr_district_mimu/\", \n                   layer=\"mmr_polbnda_adm2_250k_mimu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `/Users/georgiaxng/georgiaxng/is415-handson/Take-home_Ex/Take-home_Ex01/data/geospatial/mmr_district_mimu' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nmmrsr_district_sf <- st_transform(mmrsr_district_sf, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mmrsr_district_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## 2.6 Setting Seed\n\nTo ensure the reproducibility, we will be using a fixed seed for our randomisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\n```\n:::\n\n\n# 3. Kernel Density Estimation\n\nTo analyze and find the trends in the spatial distribution of conflict events in Myanmar, we will be using **Kernel Density Estimation (KDE)**. KDE is a non-parametric way to estimate the probability density function of a random variable, making it particularly useful in spatial analysis for identifying areas with high concentrations of events.\n\nTo determine the optimal bandwidth and kernel parameters for KDE, we will be using a sample of the data. By focusing on a smaller subset, such as specific event types or time periods, we can efficiently explore different parameter combinations and choose the one that provides the most meaningful results before scaling the analysis to the entire dataset.\n\n## 3.1 Creating owin object\n\nTo improve the accuracy of our spatial analysis, we will exclude the smaller islands that are too minor to contribute meaningfully to the Kernel Density Estimation (KDE). We will focus on the main island by merging the geometry and selecting the relevant polygon.\n\nIn this code snippet, we combine all intersecting geometries in the `mmrsr_sf` object into a single polygon using `st_union()`. We then use `st_cast()` to ensure that the result is a polygon type. From this merged polygon, we select the row with the highest number of features, which typically corresponds to the main island or the most prominent feature in the dataset.\n\nThis selected polygon is then converted to a window object using as.owin(), which allows us to use it in spatial analyses, such as Kernel Density Estimation (KDE).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_mmr <- st_union(mmrsr_sf) %>%\n    st_cast(\"POLYGON\")\nmerged_mmr <- merged_mmr[c(9)]\n\nmmr_owin <- as.owin(merged_mmr)\n```\n:::\n\n\nHere is the plot of the main island, without its outer islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\n\n## 3.2 Selection of Sample Data\n\nTo choose a representative sample, we will first calculate the median number of data points across different groupings, such as year, quarter, and event type. This will help us understand the typical size of our data subsets. Using this median value, we will identify the subset of data with an `event_count` closest to this median.\n\nBy selecting a sample that aligns with this typical value, we ensure that our sample accurately reflects the general distribution of the dataset. We will then use this representative sample to determine the optimal parameters for Kernel Density Estimation (KDE), such as bandwidth and kernel type. This approach will help us achieve more reliable and meaningful results in our spatial analysis.\n\nHere is the R code to select the representative sample. In this case, the resulting sample data we have arrived at is for **\"Battles\" in the second quarter of 2023**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean and median of event counts\nmedian_event_count <- median(grped_acled_sf$event_count)\n\n# Find the row with event_count closest to the median\nsample_acled_sf <- grped_acled_sf %>%\n  mutate(distance_to_median = abs(event_count - median_event_count)) %>%\n  arrange(distance_to_median) %>%\n  slice(1)\n\n# Print the closest row(s)\nsample_acled_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 5 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -174035.7 ymin: 1103500 xmax: 518300.4 ymax: 3006373\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 6\n   year quarter event_type event_count                                  geometry\n  <dbl>   <int> <chr>            <int>                          <MULTIPOINT [m]>\n1  2023       2 Battles            814 ((-174035.7 2284958), (-152179.1 2277258…\n# ℹ 1 more variable: distance_to_median <dbl>\n```\n\n\n:::\n:::\n\n\nHere, we converted the representative sample data to `ppp` format and checked for duplicates. In this case, no duplicates were found, confirming the integrity of our sample for further KDE analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_acled_ppp <- as.ppp(st_coordinates(sample_acled_sf),st_bbox(sample_acled_sf))\nany(duplicated(sample_acled_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nsample_acled_ppp <- sample_acled_ppp[mmr_owin]\n```\n:::\n\n\nAn overview of the point pattern plot for the sample data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sample_acled_ppp, pch = 16, cex = 0.8) \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n## 3.3 Determining the Optimal Bandwidth & Sigma\n\n### 3.3.1 Understanding Sigma & Kernel in Kernel Density Estimation (KDE)\n\n**Kernel:**\n\nThe **kernel** in Kernel Density Estimation (KDE) is a smoothing function that estimates the probability density function of a dataset. The choice of kernel function affects how the smoothing is applied to each data point. Common kernels include:\n\n-   **Gaussian Kernel**: Assumes a normal distribution around each data point, providing a smooth, continuous density estimate.\n\n-   **Epanechnikov Kernel**: Parabolic in shape, it minimizes mean squared error but is less smooth than Gaussian.\n\n-   **Uniform Kernel**: Assumes constant density within a fixed distance around each data point, simpler but less smooth.\n\n-   **Triangular Kernel**: Offers a clear density representation with sharp edges but less smoothness.\n\nThe choice of kernel affects the density estimate's smoothness and shape, with the Gaussian kernel being a versatile and commonly used option.\n\n**Sigma:**\n\nThe **sigma** argument in the density() function represents the bandwidth of the kernel in KDE. It controls the level of smoothing applied to the density estimate:\n\n-   **What Sigma Represents**: Sigma defines the standard deviation of the kernel function, determining the width of the \"smoothing window\" around each data point.\n\n-   **Effect on KDE**:\n\n    -   **Smaller Sigma**: Leads to less smoothing, producing a more sensitive and detailed density plot, but can highlight noise.\n\n    -   **Larger Sigma**: Results in greater smoothing, providing a broader view of density but might obscure finer details.\n\n-   **Choosing Sigma**: An appropriate sigma balances detail and smoothness. Methods like `bw.diggle`, `bw.ppl`, and `bw.scott` can help determine the optimal sigma value.\n\nIn summary, the kernel determines the density estimate's shape, while sigma controls the smoothing level. Both are crucial for accurately reflecting the spatial distribution of data, and selecting the right parameters is essential for meaningful KDE results.\n\n### 3.3.2 Computing Default Kernel Density Estimation\n\nFirst, since the original data is in meters, we need to rescale it to kilometers to facilitate more meaningful spatial analysis and visualization. By converting the units to kilometers, we ensure that the scale of the Kernel Density Estimation (KDE) and subsequent analyses align with the geographical extent of the study area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_acled_ppp.km <- rescale.ppp(sample_acled_ppp, 1000, \"km\")\n```\n:::\n\n\nTo visualize the spatial distribution of conflict events, here is the Kernel Density Estimation (KDE) plot generated using the default settings, as shown in the code. While default settings can be sufficient for some analyses, the resulting KDE plot here appears oversmoothed, which may obscure finer details and potential small-scale clusters.\n\nThis oversmoothing effect reduces the ability to detect subtle patterns in the conflict events, highlighting the importance of adjusting parameters like bandwidth (`sigma`) to better capture the underlying spatial structure. Thus, to improve the accuracy and granularity of the KDE, we will need to continue experimenting with different bandwidth values and kernel functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0,1,1,1))\nkde_default_destination <- density(sample_acled_ppp.km)\nplot(kde_default_destination,main = \"Default Density KDE for ACLED Myanmar 2023 Q2 'Battles'\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Experimenting With Fixed Bandwidth\n\nTo effectively choose the appropriate bandwidth for Kernel Density Estimation (KDE), several automatic bandwidth selection methods can be employed. Each method has its own approach and focus, which can significantly impact the resulting density estimate. Below are brief descriptions of four common bandwidth selection methods:\n\n-   **bw.CvL**: Calculates bandwidth using cross-validation to minimize the integrated mean squared error (IMSE) of the density estimate. This method aims to balance detail and smoothness by optimizing the bandwidth based on a global error metric, which might lead to a broad smoothing effect.\n\n-   **bw.scott**: Applies a rule-of-thumb bandwidth based on the sample size and dimensionality of the data. This method is often effective for larger datasets, providing a more generalized estimate by assuming isotropic smoothing (uniform smoothing in all directions).\n\n-   **bw.ppl**: Uses a bandwidth tailored for point pattern analysis, considering the spatial distribution of data points. This approach focuses on capturing local variations and spatial patterns, resulting in a more localized smoothing effect compared to other methods.\n\n-   **bw.diggle**: Employs a method specifically designed for point patterns to minimize the variance of the density estimate. This results in a smaller bandwidth, leading to a finer and more detailed density plot that may capture small-scale variations but could also emphasize noise.\n\n### 3.4.1 Automatic Bandwidth Methods\n\nLets begin by examining the bandwidth values obtained from various automatic bandwidth selection methods using the following code snippet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.ppl(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n21.20514 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.diggle(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n8.459462 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.CvL(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n90.92206 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.scott(sample_acled_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  sigma.x   sigma.y \n 51.29856 133.58599 \n```\n\n\n:::\n:::\n\n\nBased on the sigma values obtained from the automatic bandwidth calculation methods, we can draw the following inferences about the Kernel Density Estimation (KDE) for the sample data:\n\n-   **bw.ppl: sigma = 21.21**\\\n    A smaller sigma value suggests a more localized smoothing effect. This method is designed for point pattern analysis and aims to capture spatial patterns with greater precision, highlighting finer details within the data.\n\n-   **bw.diggle: sigma = 8.46**\\\n    As the smallest sigma value, it implies a very narrow smoothing window. This method focuses on minimizing variance and tends to produce a detailed density plot. However, it may also accentuate noise or small fluctuations in the data.\n\n-   **bw.CvL: sigma = 90.92**\\\n    This large value indicates a broad smoothing window. Consequently, each data point affects a wide surrounding area, leading to a smoother KDE that may obscure fine details and small-scale variations.\n\n-   **bw.scott: sigma.x = 51.30, sigma.y = 133.59**\\\n    The method provides different bandwidths for the x and y dimensions, suggesting anisotropic smoothing. The significant difference between these values indicates varying spatial variations in different directions, with a broader smoothing effect along the y-direction.\n\n### 3.4.2 Plotting KDE for Different Bandwidth & Kernel\n\nTo better understand these differences, we will plot the KDE results using each bandwidth value and different kernels. This visual comparison will help us assess how each bandwidth setting and kernel type influences the density estimates, allowing us to determine which combination provides the most meaningful representation of our data.\n\nIn practice, choosing the optimal KDE bandwidth is not straightforward, as there is no one-size-fits-all approach. Many studies emphasize that determining the best bandwidth often relies on visually comparing various settings and kernel types to assess their effectiveness and select the most appropriate one for the specific data at hand.\n\n#### 3.4.2.1 Overview of KDE Maps with Gaussian Kernel and Various Bandwidths\n\nHere is an overview of how in general the KDE maps generated with the respective bandwidths looks like using the Gaussian kernel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_diggle <- density(sample_acled_ppp.km, bw.diggle(sample_acled_ppp.km))\nkde_CvL <- density(sample_acled_ppp.km, bw.CvL(sample_acled_ppp.km))\nkde_scott <- density(sample_acled_ppp.km, bw.scott(sample_acled_ppp.km))\nkde_ppl <- density(sample_acled_ppp.km, bw.ppl(sample_acled_ppp.km))\n\npar(mar = c(1,1,1,1.5),mfrow = c(2,2))\nplot(kde_diggle,main = \"kde_diggle\")\nplot(kde_CvL,main = \"kde_CvL\")\nplot(kde_scott,main = \"kde_scott\")\nplot(kde_ppl,main = \"kde_ppl\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n#### 3.4.2.2 Comparing KDE Results Across Different Bandwidths and Kernels\n\nThe code chunk below plots different KDE plots for a various different pairings of kernels and bandwidths.\n\n::: panel-tabset\n## bw.ppl\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n## bw.diggle\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n## bw.CvL\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.CvL, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n\n## bw.scott\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"gaussian\"), main=\"Gaussian\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"epanechnikov\"), main=\"Epanechnikov\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"quartic\"), main=\"Quartic\")\nplot(density(sample_acled_ppp.km, sigma=bw.scott, edge=TRUE, kernel=\"disc\"), main=\"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n:::\n\nAfter evaluating the KDE plots, I opted for the **Gaussian kernel** with the bandwidth provided by `bw.ppl` because this method provided a more localized smoothing effect, better capturing the spatial patterns in the data. In comparison, the `bw.CvL` method yielded a much larger bandwidth, leading to excessive smoothing, while `bw.scott` showed considerable disparity between x and y dimensions, suggesting anisotropic smoothing. The `bw.diggle` method, though precise, resulted in very narrow smoothing that might overemphasize noise.\n\nDespite this, I found that the Gaussian KDE with `bw.ppl` still appeared to be undersmoothed. Consequently, further optimization is necessary to refine the bandwidth setting and achieve a more balanced density estimate that accurately represents the underlying spatial patterns in the data.\n\n------------------------------------------------------------------------\n\n### 3.4.3 Fine-Tuning KDE Parameters\n\nSince the Gaussian KDE using `bw.ppl` seems to be undersmoothed, we will need to adjust the sigma to achieve the desired results. To address this undersmoothing issue, we can increase the sigma value to widen the smoothing window, as demonstrated below. Through continued experimentation, we have determined these final parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadjusted_bw <- bw.ppl(sample_acled_ppp.km) * 1.5\nkde_adjusted <- density(sample_acled_ppp.km, sigma=adjusted_bw, edge=TRUE, kernel=\"gaussian\")\nplot(kde_adjusted)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=960}\n:::\n:::\n\n\nHere is a comparison between the point pattern and the KDE plot of the sample data, this comparison allows us to evaluate how effectively the KDE captures the spatial distribution of the events and highlights areas where the KDE might need further refinement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(1,0,1,0))\npar(mfrow=c(1,2))\nplot(sample_acled_ppp, pch = 16, cex = 0.5) \nplot(kde_adjusted)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nValue of the adjusted bandwidth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadjusted_bw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n31.80771 \n```\n\n\n:::\n:::\n\n\n# 4. Quarterly KDE Layers\n\n## 4.1 2021\n\n### 4.1.1 Q1\n\nThis chunk of code generates the KDE layers using the adjusted bandwidth we have previously counted and the gaussian kernel, plotting the resulting KDE layers by each quarter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=1344}\n:::\n:::\n\n\n::: callout-note\n-   **Battles**: Distinct hotspot in Shan (North), which indicates this is likely the main battlefield during this quarter.\n\n-   **Explosions/Remote Violence**: Appears to have a wider spatial distribution, with more intense activity seen along the southern, western and central-eastern parts of the country. This suggests that attacks carried out here were more widespread and not confined to one region. This could imply different actors using remote violence across various territories or a strategic shift towards this type of warfare in multiple conflict zones.\n\n-   **Strategic Developments, Violence Against Civilians**: We can observe that both events display a similar KDE map, indicating that both events could have been carried out concurrently, hence leading to the similarity. The **co-occurrence of strategic developments and civilian violence** is concerning and could imply that the areas experiencing strategic military activity are also sites where civilians are more vulnerable to harm. These could be areas under military occupation, zones of forced displacement, or regions where there is a breakdown of law and order.\n:::\n\n### 4.1.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=1344}\n:::\n:::\n\n\n::: callout-note\n\\* **Battles**: Presents a more spatially distributed distribution, with new hotspots at the Chin/Sagaing/Magway intersection.\n\n\\* **Explosions/Remote Violence**: The intensity of explosions and remote violence has **shifted southward**, with the most significant hotspot now in Yangon, the capital of the country. The shift to **Yangon** could also be a sign of more strategic attacks aimed at disrupting economic or political centers of power, following the military coup in early 2021.\n\n\\* **Strategic Developments, Violence Against Civilians:** Both events still present similar spatial distribution, reinforcing the idea that **military strategic moves** are closely linked to **targeted violence against civilians.**\n:::\n\n### 4.1.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=1344}\n:::\n:::\n\n\n::: callout-note\nAll 4 events shows a distinct hotspot at southern Sagaing, which appears to be the main battlefield and where most of the conflicts happen for 2021 Q4. Similarly, Yangon appears to have a significant amount of conflicts happening as well.\n:::\n\n### 4.1.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2021\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=1344}\n:::\n:::\n\n\n### 4.1.5 Overall Insights for 2021\n\n**Fluid Conflict Zones**: The **hotspots of conflict** in Myanmar were more fluid and dynamic, with notable shifts in violence across various regions throughout the year. This shifting pattern likely reflects the **early stages of the Myanmar civil conflict**, which began in full force following the **February 2021 military coup**. There is a strong focus placed on Yangon and Southern Sagaing in particular.\n\n## 4.2 2022\n\n### 4.2.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-46-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2022\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-47-1.png){width=1344}\n:::\n:::\n\n\n### 4.2.5 Overall Insights for 2022\n\n**Stabilization of Conflict Zones**: The KDE plot for all quarters for the year of 2022 appears to stay identical, with majority of the conflicts being in the vicinity of southern Sagaing. This consistency indicates a **stabilization** of the conflict, with fewer fluctuations in the geography of violence. This suggests that the main **battleground** has become more fixed, with both government forces and resistance groups focusing their efforts in this region.\n\n**Implications**: The entrenchment of conflict in **southern Sagaing** also likely reflects a combination of military control over key areas and entrenched resistance by local groups. This stabilization might also indicate a **stalemate** or protracted conflict, where neither side is able to decisively push the front lines or gain control of new territories.\n\n## 4.3 2023\n\n### 4.3.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-48-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-49-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 3\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2023\n  current_quarter = 4\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-51-1.png){width=1344}\n:::\n:::\n\n\n### 4.3.5 Overall Insights for 2023\n\n**Consistent hotspots**: There's a persistent area of high activity in the region around Southern Sagaing across all event types and quarters, similar to the previous year.\n\n**Event type variations**: Different event types show slightly different patterns. For example, \"Strategic developments\" tend to be more concentrated, while \"Battles\" and \"Explosions/Remote violence\" show more widespread activity.\n\n**Geographical spread:** Activity is not uniform across the country. The southern peninsular region generally shows less activity, while the central and northern regions show more.\n\n**Q4 escalation**: There appears to be an increase in activity across all event types in Q4, particularly in the northern regions.\n\n## 4.4 2024\n\n### 4.4.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2024\n  current_quarter = 1\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=1344}\n:::\n:::\n\n\n::: callout-note\n**Less conflicts**: Conflict events appears to have lessen significantly, as evidenced from the decrease in the intensity level of the hotspots across Myanmar. This decline is particularly apparent for **\"Explosions/Remote Violence,\"** where the once prominent hotspots have become **less concentrated** and more dispersed compared to previous quarters.\n:::\n\n### 4.4.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(1,0,1,0))\n  par(mfrow=c(2,2))\n  current_year = 2024\n  current_quarter = 2\n  quarter_data <- grped_acled_sf %>% filter(year == current_year, quarter == current_quarter) \n  # Loop through each event\n  for (i in seq_len(nrow(quarter_data))) {\n    \n    filtered_sf <- quarter_data[i, ]\n\n    # Extract the current year, quarter, and event type\n    current_event <- filtered_sf$event_type\n    \n    # Convert to ppp object\n    filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n    \n    if(any(duplicated(filtered_ppp))){\n      rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n    }\n    filtered_ppp <- filtered_ppp[mmr_owin]\n    # Rescale to kilometres\n    filtered_ppp.km <- rescale.ppp(filtered_ppp, 1000, \"km\")\n  \n    # Conduct KDE with the chosen bandwidth\n    kde_result <- density(filtered_ppp.km, sigma = adjusted_bw, edge = TRUE, kernel = \"gaussian\")\n    \n    # Plot the KDE\n    plot(kde_result, main = paste(current_event,\" \",current_year, \" Q\", current_quarter, sep = \"\"))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-53-1.png){width=1344}\n:::\n:::\n\n\n::: callout-note\n**Battles**: Hotspot in southern Sagaing has decreased in intensity\n\n**Violence Against Civilian**s: Hotspot in Sagaing remains, new hotspots are also appearing on the southern part of Myanmar.\n:::\n\n# 5. 2nd-Order Spatial Point Patterns Analysis\n\nIn this section, we will conduct second-order spatial point pattern analysis (PPA), which examines interactions between events at various spatial scales. By using statistical functions such as G, F, K, and L, we can quantify and explore clustering patterns, distances between events, and the spatial distribution of points relative to a given area. These functions help reveal whether the events exhibit random, clustered, or regular patterns, providing deeper insights into the underlying spatial structure of conflict events in Myanmar.\n\nHere’s a detailed description of the second-order spatial point pattern analysis functions:\n\n-   **G-function (Nearest Neighbor Distribution Function)**: The G-function describes the cumulative distribution of the distances from each event to its nearest neighboring event. It highlights how clustered events are by comparing observed distances with those expected from a random spatial pattern.\n\n-   **F-function (Empty Space Function)**: The F-function examines the distribution of distances from arbitrary (random) locations to the nearest event. It helps in evaluating how well events fill the study area. A large gap between random points and events indicates spatial heterogeneity or clustering.\n\n-   **K-function (Ripley’s K-function)**: This function estimates the number of events within a certain distance of each other, relative to what would be expected under complete spatial randomness (CSR). It accumulates the number of events within varying distances, thus detecting clustering or dispersion at multiple spatial scales. If the observed K-function is higher than expected under CSR, it indicates clustering.\n\n-   **L-function (Besag’s L-function)**: The L-function is a variance-stabilized transformation of the K-function. It linearizes the expected K-values, making it easier to interpret deviations from randomness. An L-function above the CSR line indicates clustering, while values below suggest dispersion.\n\n## 5.1 Analysis Background\n\nFor the analysis for the whole of Myanmar, I will be primarily using the **G-function** to conduct second-order spatial point pattern analysis. I chose it for its computational efficiency, straightforward interpretation of nearest-neighbor distances, and suitability for analyzing a single type of event. The K and L-functions, while valuable, are more resource-intensive, making them not ideal for my large dataset, while the F-function is less applicable to our single-type event analysis.\n\nFor the analysis of Sagaing however, I will be using the K-function to conduct the relevant analysis.\n\n### 5.1.1 Monte Carlo Simulation\n\nI will also be conducting a Monte Carlo simulation for testing **Complete Spatial Randomness (CSR)** in the spatial distribution of conflict events. This involves generating multiple random point patterns under CSR to create a range of expected spatial statistics. By comparing the observed G-function of the conflict events against these simulated envelopes, I can determine if the observed clustering or dispersion is significantly different from what would be expected by chance.\n\nThe envelope function provides upper and lower bounds for the G-function, helping to assess whether the spatial pattern of conflict events is significantly clustered or dispersed compared to random patterns. This method ensures a rigorous evaluation of spatial randomness and enhances the interpretation of observed patterns.\n\n### 5.1.2 Example of G-Function Plot\n\nThis code snippet below provides an example of a G-function plot of a sample of the data, calculated using an envelope derived from 99 simulations. We will also be keeping the confidence level of the envelopes to the default 95%.\n\nThis approach is used to evaluate the spatial distribution of events and assess how the observed point pattern compares to what might be expected under complete spatial randomness. Note that we will be using a set seed to ensure the reproducibility of our code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\ntest_second_sf <- grped_acled_sf %>% filter(event_type == \"Battles\", year == 2023, quarter ==2)\ntest_second_ppp<-as.ppp(st_coordinates(test_second_sf), st_bbox(test_second_sf))\n\nif(any(duplicated(test_second_ppp))){\n  test_second_ppp <- rjitter(test_second_ppp, retry=TRUE, nsim=1, drop=TRUE)\n}\n\ntest_second_ppp <- test_second_ppp[mmr_owin]\ntest_second.csr <- envelope(test_second_ppp, Gest, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(test_second.csr, xlim=c(0,10000), main=\"Example of G-Function Plot\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nThe plot typically shows several key elements related to both the observed data and the simulated patterns:\n\n-   **G\\^obs (Observed G-function)**:This represents the **empirical G-function** calculated from your actual point pattern data. It shows the cumulative distribution of the nearest-neighbor distances between points in the dataset.\n\n-   **G\\^theo (Theoretical G-function)**: **Theoretical G-function** that would be expected if the point pattern follows **Complete Spatial Randomness (CSR)**. Under CSR, the points are distributed independently and uniformly across the study area.\n\n-   **G\\^hi (Upper Envelope)**:\n\n    -   **Upper bound** of the G-function values generated from the random simulations (based on `nsim`, the number of simulations). It defines the maximum value that the G-function could take under CSR in these simulations.\n\n    -   If the observed G-function (G\\^obs) exceeds G\\^hi, it suggests **clustering**—points are closer together than expected by chance.\n\n-   **G\\^lo (Lower Envelope)**:\n\n    -   **Lower bound** of the G-function values from the random simulations. It defines the minimum G-function value expected under CSR.\n\n    -   If the observed G-function (G\\^obs) falls below G\\^lo, it suggests **dispersion** or **regularity**—points are more evenly spaced than expected by chance.\n\n-   **Shaded area**: Represents the 95% confidence interval\n:::\n\n## 5.2 Whole of Myanmar\n\n### 5.2.1 Hypothesis\n\nTo confirm the observed spatial patterns, I will conduct a **hypothesis test** using the **G-function** along with **Monte Carlo simulation envelopes**. The test will be designed as follows:\n\n-   **H₀:** The distribution of conflict events in Myanmar is **randomly distributed** (follows Complete Spatial Randomness, CSR).\n\n-   **H₁:** The distribution of conflict events in Myanmar is **not randomly distributed**.\n\n-   If the observed G-function lies outside the envelope, we will reject the null hypothesis, suggesting the presence of spatial clustering or dispersion.\n\n-   A **95% confidence interval** will be used for the envelopes.\n\n### 5.2.2 Battles\n\nThis chunk of code generates a G-function plot for all quarters of a particular event, using an envelope derived from 99 simulations for significance testing. Then, it saves the results to a list to plot it later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nbattle_data_sf <- grped_acled_sf %>% filter(event_type == \"Battles\")\n\n# Initialize an empty list to store the results\nbattle_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(battle_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- battle_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  battle_G_CK_list[[name]] <- G_CK.csr\n}\n\nwrite_rds(battle_G_CK_list, \"data/rds/battle_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n\nThis chunk of code plots the G-function plot for all quarters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(battle_G_CK_list)) {\n  g_ck <- battle_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(battle_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-57-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.3 Explosions/Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nexplosions_data_sf <- grped_acled_sf %>% filter(event_type == \"Explosions/Remote violence\")\n\n# Initialize an empty list to store the results\nexplosions_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(explosions_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- explosions_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  explosions_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(explosions_G_CK_list, \"data/rds/explosions_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(explosions_G_CK_list)) {\n  g_ck <- explosions_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(explosions_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.4 Strategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nstrategic_data_sf <- grped_acled_sf %>% filter(event_type == \"Strategic developments\")\n\n# Initialize an empty list to store the results\nstrategic_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(strategic_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- strategic_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  strategic_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(strategic_G_CK_list, \"data/rds/strategic_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(strategic_G_CK_list)) {\n  g_ck <- strategic_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(strategic_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-63-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.5 Violence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(123456)\nviolence_data_sf <- grped_acled_sf %>% filter(event_type == \"Violence against civilians\")\n\n# Initialize an empty list to store the results\nviolence_G_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(violence_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- violence_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[mmr_owin]\n  G_CK.csr <- envelope(filtered_ppp, Gest, nsim = 99)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  violence_G_CK_list[[name]] <- G_CK.csr\n}\nwrite_rds(violence_G_CK_list, \"data/rds/violence_G_CK_list.rds\")\n```\n:::\n\n\n<!--# Read from RDS -->\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(violence_G_CK_list)) {\n  g_ck <- violence_G_CK_list[[i]]\n  plot(g_ck, xlim=c(0,10000), main=names(violence_G_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-66-1.png){width=1344}\n:::\n:::\n\n\n### 5.2.6 Insights\n\n-   Majority of the observed G-function plotted for each quarter for the different events lies **above the envelope**, suggesting that the points, in this case the conflicts, are **more clustered** than expected under CSR. This means that the distribution of the conflicts is not at random and tends to cluster in specific regions.\n\n-   The slope of the observed G-function also generally shows a **smooth and constant trend**.\n\n-   The only exception to the observed trends is the plots for **2021 Q1**, which display a more **irregular pattern**. This irregularity can be attributed to having **fewer data points** during this time, as the civil war had only just begun in February 2021. When the number of events is smaller, the **statistical power** of the analysis decreases, leading to less smooth or more erratic G-function patterns. As a result, the G-function for this early quarter may not accurately reflect clustering or dispersion. Given the **sparse data** from this period, we will not be placing significant weight on the 2021 Q1 results when making decisions about accepting or rejecting the hypothesis.\n\n**Conclusion**:\n\n-   Based on the analysis, the majority of the observed G-function lies outside the envelope, indicating that the conflict events in Myanmar exhibit a pattern of clustering rather than random distribution. This leads us to **reject the null hypothesis** that the conflicts are randomly distributed. Instead, the results suggest that conflict events are spatially concentrated in specific regions.\n\n## 5.3 Hotspot of Conflict\n\n### 5.3.1 Identifying the Hotspot of Conflict\n\nWhile the KDE map shows a high concentration of conflict in the region where Sagaing, Magway, and Mandalay intersect, it's challenging to visually pinpoint the exact region with the highest density of conflict events. To overcome this, we employ a quantitative approach using the following code chunk to calculate the number of conflict events within each region.\n\nBy counting the number of data points within each region, we observe that the majority of conflict events occur in the Sagaing region. This result aligns with the spatial trends observed in the KDE map, confirming Sagaing as the area with the highest concentration of conflict.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty dataframe to store results\nconflict_counts <- data.frame(Region = character(), Conflict_Count = integer(), stringsAsFactors = FALSE)\n\n# Get a list of unique regions\nregions <- unique(mmrsr_sf$ST)\n\n# Loop through each region\nfor (region in regions) {\n  # Filter the region geometry\n  region_sf <- mmrsr_sf %>% filter(ST == region)\n  \n  # Perform spatial intersection with conflict points\n  no_of_conflict_within <- st_intersection(acled_sf, region_sf)\n  \n  # Count the number of conflicts in this region\n  conflict_count <- nrow(no_of_conflict_within)\n  \n  # Store the results in the dataframe\n  conflict_counts <- rbind(conflict_counts, data.frame(Region = region, Conflict_Count = conflict_count))\n}\n\n# Arrange the results in descending order of conflict count\nconflict_counts_ordered <- conflict_counts %>%\n  arrange(desc(Conflict_Count))\n\nwrite_rds(conflict_counts_ordered, \"data/rds/conflict_counts_ordered.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_counts_ordered <- read_rds( \"data/rds/conflict_counts_ordered.rds\")\nprint(conflict_counts_ordered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Region Conflict_Count\n1       Sagaing          11128\n2        Magway           4179\n3      Mandalay           3603\n4  Shan (North)           2938\n5        Kachin           2776\n6        Yangon           2608\n7       Rakhine           2277\n8   Tanintharyi           2240\n9         Kayin           1817\n10          Mon           1677\n11         Chin           1557\n12 Shan (South)           1430\n13        Kayah           1327\n14  Bago (East)           1229\n15   Ayeyarwady            852\n16  Bago (West)            639\n17  Nay Pyi Taw            268\n18  Shan (East)             56\n```\n\n\n:::\n:::\n\n\n### 5.3.2 Sagaing Region\n\nGiven that conflict events in Sagaing account for around 25% of the total, we aim to conduct a more detailed analysis to understand the spatial patterns within this significant region. The first step involves isolating the conflict events specific to Sagaing by filtering the data to focus exclusively on this area. For this, instead of the G-function previously used, we will be using the K-function instead since we are now working with a smaller dataset.\n\n#### 5.3.2.1 Overview of Sagaing Region\n\nSince we are focusing solely on Sagaing, here is a more granular map from MIMU which divides Sagaing into districts so we get a better overview of it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_map_sf <- mmrsr_district_sf %>% filter(ST == \"Sagaing\")\ntm_shape(sagaing_map_sf) +\n  tm_polygons(col = \"DT\", palette = colors) +  # Apply color palette to polygons\n  tm_text(\"DT\", size = 1, col = \"black\", bg.color = \"white\", just = c(\"center\", \"center\"),  xmod = 0, ymod = 0) + tm_layout(main.title = \"Sagaing\",\n            main.title.position = \"center\",\n            main.title.size = 1.6,\n            legend.outside = TRUE,\n            frame = TRUE)+\n    tm_legend(title = \"Districts\")  # Set custom legend title\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-69-1.png){width=960}\n:::\n:::\n\n\nThis chunk of code creates a Sagaing owin object, converts acled_sf into a ppp object and plots a map displaying only conflict events in Sagaing Region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_owin <- as.owin(sagaing_map_sf)\nacled_ppp <- as.ppp(acled_sf)\nsagaing_ppp <- acled_ppp[sagaing_owin]\nplot(sagaing_ppp, pch = 16, cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n#### 5.3.2.2 Hypothesis\n\nSimilar to the one we did for the whole of myanmar, we will conduct a **hypothesis test** using the **K-function** along with **Monte Carlo simulation envelopes**. The test will be designed as follows:\n\n-   **H₀:** The distribution of conflict events in Sagaing is **randomly distributed** (follows Complete Spatial Randomness, CSR).\n\n-   **H₁:** The distribution of conflict events in Sagaing is **not randomly distributed**.\n\n-   If the observed G-function lies outside the envelope, we will reject the null hypothesis, suggesting the presence of spatial clustering or dispersion.\n\n-   A **95% confidence interval** will be used for the envelopes.\n\n#### 5.3.2.3 Battles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nbattle_data_sf <- grped_acled_sf %>% filter(event_type == \"Battles\")\n\n# Initialize an empty list to store the results\nsagaing_battle_K_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(battle_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- battle_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[sagaing_owin]\n  K_ck.csr <- envelope(filtered_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  sagaing_battle_K_CK_list[[name]] <- K_ck.csr\n}\n\nwrite_rds(sagaing_battle_K_CK_list, \"data/rds/sagaing_battle_K_CK_list.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(sagaing_battle_K_CK_list)) {\n  k_ck <- sagaing_battle_K_CK_list[[i]]\n  plot(k_ck, . - r ~ r, xlab=\"d\", ylab=\"k(d)-r\", main=names(sagaing_battle_K_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-73-1.png){width=1344}\n:::\n:::\n\n\n#### 5.3.2.4 Explosions/ Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nexplosions_data_sf <- grped_acled_sf %>% filter(event_type == \"Explosions/Remote violence\")\n\n# Initialize an empty list to store the results\nsagaing_explosions_K_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(explosions_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- explosions_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[sagaing_owin]\n  K_ck.csr <- envelope(filtered_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  sagaing_explosions_K_CK_list[[name]] <- K_ck.csr\n}\n\nwrite_rds(sagaing_explosions_K_CK_list, \"data/rds/sagaing_explosions_K_CK_list.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(sagaing_explosions_K_CK_list)) {\n  k_ck <- sagaing_explosions_K_CK_list[[i]]\n  plot(k_ck, . - r ~ r, xlab=\"d\", ylab=\"k(d)-r\", main=names(sagaing_explosions_K_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-76-1.png){width=1344}\n:::\n:::\n\n\n#### 5.3.2.5 Strategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nstrategic_data_sf <- grped_acled_sf %>% filter(event_type == \"Strategic developments\")\n\n# Initialize an empty list to store the results\nsagaing_strategic_K_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(strategic_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- strategic_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[sagaing_owin]\n  K_ck.csr <- envelope(filtered_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  sagaing_strategic_K_CK_list[[name]] <- K_ck.csr\n}\n\nwrite_rds(sagaing_strategic_K_CK_list, \"data/rds/sagaing_strategic_K_CK_list.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(sagaing_strategic_K_CK_list)) {\n  k_ck <- sagaing_strategic_K_CK_list[[i]]\n  plot(k_ck, . - r ~ r, xlab=\"d\", ylab=\"k(d)-r\", main=names(sagaing_strategic_K_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-79-1.png){width=1344}\n:::\n:::\n\n\n#### 5.3.2.6 Violence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123456)\nviolence_data_sf <- grped_acled_sf %>% filter(event_type == \"Violence against civilians\")\n\n# Initialize an empty list to store the results\nsagaing_violence_K_CK_list <- list()\n\n# Loop through each combination of year and quarter\nfor (i in seq_len(nrow(violence_data_sf))) {\n  \n  # Filter the data for the current iteration\n  filtered_sf <- violence_data_sf[i, ]\n  \n  # Extract the current year, quarter, and event type\n  current_year <- filtered_sf$year\n  current_quarter <- filtered_sf$quarter\n  \n  # Convert to ppp object\n  filtered_ppp <- as.ppp(st_coordinates(filtered_sf), st_bbox(filtered_sf))\n  \n  if(any(duplicated(filtered_ppp))){\n    filtered_ppp <- rjitter(filtered_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  filtered_ppp <- filtered_ppp[sagaing_owin]\n  K_ck.csr <- envelope(filtered_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n  \n  # Save the result in the list with a unique name\n  name <- paste0(current_year, \"_Q\", current_quarter)\n  sagaing_violence_K_CK_list[[name]] <- K_ck.csr\n}\n\nwrite_rds(sagaing_violence_K_CK_list, \"data/rds/sagaing_violence_K_CK_list.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(2,1,2,1))\npar(mfrow=c(4,4))\n# Plotting\nfor(i in seq_along(sagaing_violence_K_CK_list)) {\n  k_ck <- sagaing_violence_K_CK_list[[i]]\n  plot(k_ck, . - r ~ r, xlab=\"d\", ylab=\"k(d)-r\", main=names(sagaing_violence_K_CK_list)[i])\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-82-1.png){width=1344}\n:::\n:::\n\n\n#### 5.3.2.7 Insights\n\n-   Similar to the G-function plots for Myanmar, we can see that most of the plots are identical with majority of the observed K-function being outside and above the envelope with constant and smooth trends.\n\n-   The smooth trend of the K-function across the plots implies that the clustering of events is not only prevalent but also persistent over time.\n\n-   The only exception to this is yet again 2021 q1, this time we can also observe a stepped pattern with the plots which again is likely attributed to the small amount of data points during this period of time, and hence we will not be placing significant weight on the 2021 Q1 results when making decisions about accepting or rejecting the hypothesis.\n\n-   Since the observed K-function are all above the envelope, we can reject the null hypothesis that conflict events in Sagaing is **randomly distributed** and instead conclude that they are clustered at specific regions. Observing the point pattern map we previously plotted, we can see that most conflict events occur in the following districts: Kanbalu, Shwebo, Sagaing (District, not region), Monywa, Yinmarbi.\n\n# 6. Quarterly Spatio-Temporal KDE Layers\n\nIn this section, we will be conducting spatiotemporal Kernel Density Estimation (KDE). This approach allows us to visualize and analyze the density of conflicts over both space and time, providing a comprehensive view of how conflict activity evolves. By applying KDE to the dataset spanning from 2021 to 2024, we can identify hotspots and trends in conflict intensity across different quarters and regions.\n\n## 6.1 Battles\n\n### 6.1.1 Overview\n\nThis chunk of code utilizes `spattemp.density()` to compute the spatiotemporal KDE for all 14 quarters from 2021 to 2024 Q2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Battles\"\n  \n  # Filter the data\n  battle_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n  )\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(battle_data_sf), st_bbox(battle_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n\n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-83-1.png){width=1344}\n:::\n:::\n\n\n### 6.1.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Battles\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-85-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.2 Explosions/Remote violence\n\n### 6.2.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Explosions/Remote violence\"\n\n  # Filter the data\n  explosions_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(explosions_data_sf), st_bbox(explosions_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-89-1.png){width=1344}\n:::\n:::\n\n\n### 6.2.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Explosions/Remote violence\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-91-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-92-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-93-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-94-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.3 Strategic developments\n\n### 6.3.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Strategic developments\"\n  \n  # Filter the data\n  strategic_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(strategic_data_sf), st_bbox(strategic_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-95-1.png){width=1344}\n:::\n:::\n\n\n### 6.3.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Strategic developments\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-97-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-98-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-99-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-100-1.png){width=1344}\n:::\n:::\n\n:::\n\n## 6.4 Violence against civilians\n\n### 6.4.1 Overview\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(4,4))\n  current_event = \"Violence against civilians\"\n  # Filter the data\n  violence_data_sf <- grped_acled_sf %>% filter(event_type == current_event)\n  \n  # Define time slices for plotting\n  tims <- c(\n  \"2021 Q1\", \"2021 Q2\", \"2021 Q3\", \"2021 Q4\",\n  \"2022 Q1\", \"2022 Q2\", \"2022 Q3\", \"2022 Q4\",\n  \"2023 Q1\", \"2023 Q2\", \"2023 Q3\", \"2023 Q4\",\n  \"2024 Q1\", \"2024 Q2\"\n)\n  \n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(violence_data_sf), st_bbox(violence_data_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(tims[x]))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-101-1.png){width=1344}\n:::\n:::\n\n\n### 6.4.2 By Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event = \"Violence against civilians\"\n  quarter_2021_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2021)\n  quarter_2022_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2022)\n  quarter_2023_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2023)\n  quarter_2024_sf <- grped_acled_sf %>% filter(event_type == current_event, year == 2024)\n```\n:::\n\n\n::: panel-tabset\n## 2021\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2021\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2021_sf), st_bbox(quarter_2021_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-103-1.png){width=1344}\n:::\n:::\n\n\n## 2022\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2022\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2022_sf), st_bbox(quarter_2022_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-104-1.png){width=1344}\n:::\n:::\n\n\n## 2023\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2023\n  \n  tims <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2023_sf), st_bbox(quarter_2023_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-105-1.png){width=1344}\n:::\n:::\n\n\n## 2024\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  par(mar = c(2,0,2,0))\n  par(mfrow=c(2,2))\n  year = 2024\n  \n  tims <- c(\"Q1\", \"Q2\")\n  # Convert to ppp object\n  spattemp_ppp <- as.ppp(st_coordinates(quarter_2024_sf), st_bbox(quarter_2024_sf))\n  # Remove Duplicates\n  if(any(duplicated(spattemp_ppp))){\n    rjitter(spattemp_ppp, retry=TRUE, nsim=1, drop=TRUE)\n  }\n  \n  # Convert to owin\n  spattemp_ppp <- spattemp_ppp[mmr_owin]\n  \n  # Compute the spatiotemporal Kernel Density Estimate (KDE)\n  st_kde <- spattemp.density(spattemp_ppp)\n  for(x in seq_along(tims)){\n    plot(st_kde, x, \n     override.par=FALSE, \n     fix.range=TRUE, \n     main=paste(year,tims[x]))}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-106-1.png){width=1344}\n:::\n:::\n\n:::\n\n# 7. 2nd-Order Spatio-temporal Point Patterns Analysis\n\nThe specific questions we aim to address are whether the locations of conflict in Myanmar are spatio-temporally independent. Using second-order spatio-temporal point pattern analysis, we will examine if the conflicts exhibit significant clustering or dispersion across geographic areas and over time.\n\nThis section is definitely the toughest for me as it was hard to find resources and documentations online to perform the relevant analysis.\n\n## 7.1 Learning Process\n\n### 7.1.1 Starting Out\n\nTo start off, I researched on the potential Second Order Spatio-temporal Point Patterns Analysis methods I could use and ended up shortlisting out these options:\n\n-   **Spatio-temporal K-function**: This function extends the traditional K-function to consider both space and time, allowing us to assess how conflicts cluster over time and across different locations.\n\n-   **Ripley’s K-function**: Specifically, the K-function can be adapted for spatio-temporal analysis to evaluate the density of events in both dimensions. This helps in identifying patterns of clustering or dispersion over specified time intervals.\n\n-   **Log-Gaussian Cox Process (LGCP)**: This is a flexible model that accounts for spatial dependence in point patterns and allows for varying intensity across space and time. LGCP can help in modeling the intensity of conflict events as a function of spatial covariates, providing insights into the underlying processes driving the distribution of conflicts.\n\nInstinctively, I was inclined to stick with the K-function since it is a method I am familiar with and have applied before, making it a comfortable starting point for my analysis. However, I also recognized that the term \"Log-Gaussian Cox Process\" appeared frequently in the literature I reviewed, which prompted me to include it in my shortlist.\n\n### 7.1.2 Failed Attempts\n\nDespite trying many different functions and methods, not many of them came through. A method that I had initially thought worked with the help of ChatGPT was using time (in this case quarter number) to mark the point patterns. However, I soon realised after that the standard `Kest` function that we used in class does not seem to take into account marks.\n\n#### Using Mark for K-Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_event <- \"Battles\"\n\nquarter_to_continuous <- function(year, quarter) {\n  # Calculate the number of quarters since a reference point (e.g., 2000 Q1)\n  reference_year <- 2021\n  quarters_since_reference <- (year - reference_year) * 4 + quarter\n  return(quarters_since_reference)\n}\n\ngrped_acled_quartered_sf <- acled_sf %>%   mutate(\n                                                          year = as.numeric(year),\n                                                          quarter = as.numeric(quarter),\n                                                          t = quarter_to_continuous(year, quarter)\n                                                        )\ngrped_acled_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n\n# Step 2: Convert the data to a spatio-temporal point pattern\n# Define the spatial window (using your bounding box)\n\n# Create a spatio-temporal point pattern (ppp is the spatial part, time is added separately)\nppp_data <- as.ppp(st_coordinates(grped_acled_quartered_sf), W = mmr_owin)\nmarks(ppp_data) <- data.frame(time = acled_sf$t)\n\nKst_result <- Kest(ppp_data, tmax = 1, rmax = 10000)\n\n# Step 4: Visualize and interpret the results\nplot(Kst_result)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-107-1.png){width=672}\n:::\n:::\n\n\n## 7.2 Space-Time Inhomogeneous K-function\n\nThe method that I eventually ended up going for, and succeeding in getting to actually work (or at least have some semblance of success) is using `STIKhat()` from the package `stpp` which is said to be designed for \"Space-Time Point Pattern Simulation, Visualisation and Analysis\"**.**\n\n[`STIKhat()`](https://rdrr.io/cran/stpp/man/STIKhat.html): Compute an estimate of the Space-Time Inhomogeneous K-function.\n\nThis chunk of code converts acled data to continuous quarter for time slices and gets rid of duplicate rows with the same event type, geometry and t (overall quarter no, e.g. 2024 Q2 –\\> 14).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  quarter_to_continuous <- function(year, quarter) {\n    # Calculate the number of quarters since a reference point (e.g., 2000 Q1)\n    reference_year <- 2021\n    quarters_since_reference <- (year - reference_year) * 4 + quarter\n    return(quarters_since_reference)\n  }\n  \n  grped_acled_quartered_sf <- acled_sf %>%   mutate(year = as.numeric(year),\n                                                    quarter = as.numeric(quarter),\n                                                    t = quarter_to_continuous(year, quarter)\n                                                    ) %>% distinct(event_type, geometry, t, .keep_all = TRUE)\n```\n:::\n\n\n### 7.2.1 Battles\n\nThis chunk of code utilises `STIKhat()` from the `stpp` package to compute an estimate of the Space-Time Inhomogeneous K-function and `plotK()` to plot the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event <- \"Battles\"\n\n  battle_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n  \n  coords_matrix <- st_coordinates(battle_quartered_sf)\n  x_coords <- coords_matrix[, \"X\"]\n  y_coords <- coords_matrix[, \"Y\"]\n  \n  stpp_data <- as.3dpoints(x_coords,y_coords, battle_quartered_sf$t)\n  \n  Kst_result <- stpp::STIKhat(xyt=stpp_data)\n\n  write_rds(Kst_result, \"data/rds/battle_stik_result.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nThe code below plots the different graphical representation of the estimate of the Space-Time Inhomogeneous K-function.\n\n::: panel-tabset\n## persp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(battle_stik_result, type =\"persp\")\n```\n:::\n\n\n## projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(battle_stik_result)\n```\n:::\n\n\n## image\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(battle_stik_result, type =\"image\")\n```\n:::\n\n:::\n\n### 7.2.2 Explosions/ Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  current_event <- \"Explosions/Remote violence\"\n\n  explosions_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n  \n  coords_matrix <- st_coordinates(explosions_quartered_sf)\n  x_coords <- coords_matrix[, \"X\"]\n  y_coords <- coords_matrix[, \"Y\"]\n  \n  stpp_data <- as.3dpoints(x_coords,y_coords, explosions_quartered_sf$t)\n  \n  Kst_result <- stpp::STIKhat(xyt=stpp_data)\n\n  write_rds(Kst_result, \"data/rds/explosions_stik_result.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n::: panel-tabset\n## persp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(explosions_stik_result, type =\"persp\")\n```\n:::\n\n\n## projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(explosions_stik_result)\n```\n:::\n\n\n## image\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(explosions_stik_result, type =\"image\")\n```\n:::\n\n:::\n\n### 7.2.3 Strategic developments\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  current_event <- \"Strategic developments\"\n\n  strategic_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n  \n  coords_matrix <- st_coordinates(strategic_quartered_sf)\n  x_coords <- coords_matrix[, \"X\"]\n  y_coords <- coords_matrix[, \"Y\"]\n  \n  stpp_data <- as.3dpoints(x_coords,y_coords, strategic_quartered_sf$t)\n  \n  Kst_result <- stpp::STIKhat(xyt=stpp_data)\n\n  write_rds(Kst_result, \"data/rds/strategic_stik_result.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n::: panel-tabset\n## persp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(strategic_stik_result, type =\"persp\")\n```\n:::\n\n\n## projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(strategic_stik_result)\n```\n:::\n\n\n## image\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(strategic_stik_result, type =\"image\")\n```\n:::\n\n:::\n### 7.2.4 Violence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n  current_event <- \"Violence against civilians\"\n  violence_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n  \n  coords_matrix <- st_coordinates(violence_quartered_sf)\n  x_coords <- coords_matrix[, \"X\"]\n  y_coords <- coords_matrix[, \"Y\"]\n  \n  stpp_data <- as.3dpoints(x_coords,y_coords, violence_quartered_sf$t)\n  \n  Kst_result <- stpp::STIKhat(xyt=stpp_data)\n\n  write_rds(Kst_result, \"data/rds/violence_stik_result.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n::: panel-tabset\n## persp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(violence_stik_result, type =\"persp\")\n```\n:::\n\n\n## projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(violence_stik_result)\n```\n:::\n\n\n## image\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotK(violence_stik_result, type =\"image\")\n```\n:::\n\n:::\n\n### LGCP\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  current_event <- \"Battles\"\n  \n  quarter_to_continuous <- function(year, quarter) {\n    # Calculate the number of quarters since a reference point (e.g., 2000 Q1)\n    reference_year <- 2021\n    quarters_since_reference <- (year - reference_year) * 4 + quarter\n    return(quarters_since_reference)\n  }\n  \n  grped_acled_quartered_sf <- acled_sf %>%   mutate(\n                                                            year = as.numeric(year),\n                                                            quarter = as.numeric(quarter),\n                                                            t = quarter_to_continuous(year, quarter)\n                                                          )\n  grped_acled_quartered_sf <- grped_acled_quartered_sf %>% filter(event_type == current_event)\n  \n  # Step 2: Convert the data to a spatio-temporal point pattern\n  # Define the spatial window (using your bounding box)\n  \n  # Create a spatio-temporal point pattern (ppp is the spatial part, time is added separately)\n  coords_matrix <- st_coordinates(grped_acled_quartered_sf)\n  x_coords <- coords_matrix[, \"X\"]\n  y_coords <- coords_matrix[, \"Y\"]\n  time_interval_range <- c(min(grped_acled_quartered_sf$t), max(grped_acled_quartered_sf$t))\n  \n  stpp_data <- as.3dpoints(x_coords,y_coords, grped_acled_quartered_sf$t)\n  \n  Kst_result <- stpp::STIKhat(xyt=stpp_data)\n  \n  # Step 4: Visualize and interpret the results\n  # plot(x=Kst_result)\n  # animation(xyt=Kst_result)\n  # rlgcp(coords_matrix,time_interval_range)\n```\n:::\n\n\n# 8. OpenStreetmap\n\n# 9. Overall Insights\n\n# 10. Reflections\n\nThe biggest challenge I faced in this assignment was definitely in the interpretation of the plots and the analysis. It was difficult to find online resources on how to interpret it, and while there were numerous technical guides on how to calculate spatial statistics, very few focused on providing clear explanations for what the results actually mean in a real-world context.\n\nUnderstanding how to interpret functions like the G-function and the significance of clustering versus dispersion required a deep dive into spatial theory, which was not always straightforward.\n\nAnother layer of complexity was in distinguishing between statistical significance and practical relevance. While my results showed clear clustering, translating that into meaningful insights—such as understanding why certain areas experience more conflicts—was not immediately obvious. This challenge highlighted the importance of combining spatial analysis with domain knowledge, in this case, political or socio-economic factors driving conflict.\n\nFurthermore, I also had to carefully consider the assumptions behind the models I used, particularly the assumption of Complete Spatial Randomness (CSR). In reality, conflicts are rarely random, and this led to questions about how appropriate these models are for analyzing such phenomena. It pushed me to think critically about the limitations of the tools and methods and reminded me that spatial analysis is as much about the context and the data as it is about the statistical techniques.\n\nIn the end, this assignment taught me the importance of not just relying on statistical results but also developing the ability to interpret and contextualize those results in light of the real-world phenomena they are meant to represent. It also reinforced the need for interdisciplinary approaches, combining quantitative analysis with qualitative insights.\n\n# 11. References\n\nBaddeley, A., Rubak, E., & Turner, R. (2016). *Spatial point patterns: Methodology and applications with R*. CHAPMAN & HALL CRC.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}