---
title: "In Class Exercise 9"
author: "Georgia Ng"
date: "October 21, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 6.0 Loading the R packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)
```

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds") 
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
```

## 6.1 Conventional Hieracrchical Clustering

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.

dist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.

The code chunk below is used to compute the proximity matrix using euclidean method.

```{r}
proxmat <- dist(shan_ict, method = "euclidean")
hclust_ward <- hclust(proxmat, method = "ward.D") 
groups <- as.factor(cutree(hclust_ward, k=6))
```

Then, we append to the geospatial data with the following code

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>% rename(CLUSTER=as.matrix.groups.) %>% select(-c(3:4, 7:9)) %>% rename(TS = TS.x)
```

The below chunk of code plots the dendrogram.

```{r}
#| fig-height: 7
#| fig-width: 12
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2:5)
```

And below here is the cluster map.

::: callout-tip
qtm is useful for categorical data
:::

```{r}
#| fig-height: 7
qtm(shan_sf_cluster, "CLUSTER")
```

## 6.2 Spatially Constrained Clustering: SKATER method

### 6.2.1 Step 1: Computing nearest neighbours

```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

------------------------------------------------------------------------

### 6.2.2 Step 2: Visualising the neighbours

```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, 
     pts, 
     col="blue", 
     add=TRUE)
```

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 13
plot(st_geometry(shan_sf), 
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, 
     pts, 
     col="blue", 
     add=TRUE)
```

------------------------------------------------------------------------

### 6.2.3 Step 3: Computing minimum spanning tree

#### 6.2.3.1 Calculating edge costs

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

#### 6.2.3.2 Incorporating these costs into a weights object

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

#### 6.2.3.3 Computing MST

```{r}
shan.mst <- mstree(shan.w)
```

#### 6.2.3.4 Visualising MST

```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot.mst(shan.mst, 
         pts, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

```{r}
#| echo: false
#| fig-height: 10
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot.mst(shan.mst, 
         pts, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

## 6.3 Computing spatially constrained clusters using SKATER method

::: panel-tabset
### The code

```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

### The skater tree

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(skater.clust6, 
     pts, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```
:::

### The code to plot skater tree

```{r}
#| eval: false
plot(st_geometry(shan_sf), 
     border=gray(.5))
plot(skater.clust6, 
     pts, 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

## 6.4 Visualising the clusters in choropleth map

### 6.4.1 The plot

```{r}
#| echo: false
#| fig-height: 7
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

### 6.4.2 The code

```{r}
#| eval: false
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

### 6.4.3 Plotting the cluster maps

#### 6.4.3.1 The Code

```{r}
#| eval: false
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

#### 6.4.3.2 The Plot

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

## 6.5 Spatially Constrained Clustering: ClustGeo Method

### 6.5.1 Computing spatial distance matrix

In the code chunk below, [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package is used to compute the distance matrix.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

### 6.5.2 The cluster graphs

```{r}
#| echo: false
cr <- choicealpha(proxmat, distmat, 
                  range.alpha = seq(0, 1, 0.1), 
                  K=6, graph = TRUE)
```

### 6.5.3 The code

```{r}
#| eval: false
cr <- choicealpha(proxmat, distmat, 
                  range.alpha = seq(0, 1, 0.1), 
                  K=6, graph = TRUE)
```

### 6.5.4 Saving clustGeo output

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clustG, k=6))
shan_sf_clustGeo <- cbind(shan_sf, 
                          as.matrix(groups)) %>%
  rename(`clustGeo` = `as.matrix.groups.`)
```

### 6.5.5 Visualising the clustGeo map

```{r}
#| fig-height: 8
qtm(shan_sf_clustGeo, "clustGeo")
```

### 6.5.6 Comparing cluster maps

#### 6.5.6.1 The code

```{r}
#| eval: false
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

clustGeo.map <- qtm(shan_sf_clustGeo,
                   "clustGeo") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map, 
             clustGeo.map,
             asp=NA, ncol=3)
```

#### 6.5.6.2 The plot

```{r}
#| echo: false
#| fig-width: 16
#| fig-height: 6
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.8, 0.6))

shclust.map <- qtm(shan_sf_spatialcluster,
                   "skater_CLUSTER") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

clustGeo.map <- qtm(shan_sf_clustGeo,
                   "clustGeo") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c(0.7, 0.6))

tmap_arrange(hclust.map, shclust.map, 
             clustGeo.map,
             asp=NA, ncol=3)
```

## 6.6 Characterising the clusters

### 6.6.1 The plot

```{r}
#| echo: false
#| fig-width: 20
#| fig-height: 8
ggparcoord(data = shan_sf_clustGeo, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```

### 6.6.2 The code

```{r}
#| eval: false
ggparcoord(data = shan_sf_clustGeo, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```
