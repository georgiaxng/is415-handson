---
title: "In Class Exercise 2"
author: "Georgia Ng"
date: "August 26, 2024"
date-modified: "last-modified"
format: html
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 2.0 Overview

In this exercise, we learn the various practices of importing data,

Before we start the exercise, we will need to import necessary R packages first. We will use the following packages sf and tidyverse.

```{r}
pacman::p_load(sf,tidyverse)
```

## 2.1 Importing data

### 2.1.1 Dataset

We will be using the below datasets for this exercise.

-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg

-   Master Plan 2019 Subzone Boundary (Web) from data.gov.sg

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2023 from singstat.gov.sg

### 2.1.2 Master Plan 2014 Subzone Boundary

This code chunk imports in shapefile.

```{r}
mpsz14_shp <- st_read(dsn = "data/MPSZ2014/MasterPlan2014SubzoneBoundaryWebSHP/", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

Converting the Master Plan 2014 Subzone Boundary shapefile to a kml file.

```{r}
#! output: false
mpsz14_kml = st_write(mpsz14_shp,"data/MPSZ2014/MasterPlan2014SubzoneBoundary_WEB_PL.kml",delete_dsn = TRUE)
```

### 2.1.3 Master Plan 2019 Subzone Boundary

The below chunk of code is used to import Master Plan 2019 shapefile and also project it to the 3414 crs system:

```{r}
mpsz19_shp <- st_read(dsn = "data/MPSZ2019", 
                  layer = "MPSZ-2019") %>%
st_transform(crs = 3414)
```

> Refer to <https://epsg.io/> for the crs code when you need to reproject, if the coordinates are in geographic coordinate system, it may be necessary to convert it to the projected coordinate system and vice versa. It will depend on the usecase so it is important to check it.
>
> `st_crs()` can be used to check the crs currently used. eg. `st_crs(mpsz19_shp)`

Importing Master Plan 2019 in kml format:

```{r}
mpsz19_kml <- st_read("data/MPSZ2019/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

### 2.1.4 Population Data

The below code imports the population data.

```{r}
popdata <- read_csv("data/respopagesextod2023/respopagesextod2023.csv")
```

Aggregating the data and grouping them by area, subzone and age group.

```{r}
popdata2023 <- popdata %>%
  group_by(PA,SZ,AG) %>%
  summarize(`POP`=sum(`Pop`))%>%
  ungroup()%>%
  pivot_wider(names_from = AG,
              values_from = POP)
colnames(popdata2023)
```

```{r}
popdata2023 <- popdata2023 %>%
mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[14])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+
rowSums(.[15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

## 2.2 Joining popdata2023 and mpsz19_shp

```{r}
popdata2023 <- popdata2023 %>% mutate_at(.vars = vars(PA,SZ), .funs = list(toupper))
```

> `toupper` is used to convert all text to uppercases so that the data is uniform for comparison, filtering, or joining with other datasets.

```{r}
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023, by = c("SUBZONE_N" = "SZ"))
```

```{r}
popdata2023_mpsz <- left_join(popdata2023, mpsz19_shp, by = c("SZ" = "SUBZONE_N"))
```
