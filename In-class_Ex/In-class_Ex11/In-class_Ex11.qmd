---
title: "In Class Exercise 11"
author: "Georgia Ng"
date: "October 28, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 11.1 Importing The Packages

```{r}
pacman::p_load(olsrr, ggstatsplot, sf, 
               spdep, tmap, tidyverse, 
               sfdep, performance)
```

## 11.2 Importing the data

```{r}
condo_resale <- read_csv("data/aspatial/Condo_resale_2015.csv")
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
condo_resale_sf <- st_as_sf(condo_resale,
                            coords = c("LONGITUDE", "LATITUDE"),
                            crs=4326) %>%
  st_transform(crs=3414)

```

## 11.3 Correlation Analysis - ggstatsplot methods

Correlation matrix is an effective graphical method for checking if there are pair independent variables with high correlation. In the code chunk below, [`ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) is used to plot the correlation matrix.

```{r}
#| eval: false
ggcorrmat(condo_resale[, 5:23])
```

```{r}
#| echo: false
#| fig-width: 13
#| fig-height: 8
ggcorrmat(condo_resale[, 5:23])
```

## 11.4 Building a Hedonic Pricing Model by using Multiple Linear Regression Method

```{r}
condo_mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM +AGE + PROX_CBD + PROX_CHILDCARE +PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN +PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL +PROX_SUPERMARKET + PROX_BUS_STOP +
NO_Of_UNITS + FAMILY_FRIENDLY +
FREEHOLD + LEASEHOLD_99YR, data=condo_resale_sf)
summary (condo_mlr)
```

## 11.5 Introducing olsrr package

### 11.5.1 Generating tidy linear regression report

```{r}
ols_regress((condo_mlr))
```

### 11.5.2 Variable Selection

#### 11.5.2.1 The methods

Stepwise regression is the step-by-step iterative construction of a regression model that involves the selection of independent variables to be used in a final model. It involves adding or removing potential explanatory variables in succession and testing for statistical significance after each iteration. 

-   [`ols_step_forward_p`](https://olsrr.rsquaredacademy.com/reference/ols_step_forward_p)
-   [`ols_step_backward_p`](https://olsrr.rsquaredacademy.com/reference/ols_step_backward_p)
-   [`ols_step_both_p`](https://olsrr.rsquaredacademy.com/reference/ols_step_both_p)

#### 11.5.2.2 Step Forward
```{r}
condo_fw_mlr <- ols_step_forward_p(condo_mlr, p_val = 0.05, details = FALSE)
condo_fw_mlr
```

```{r}
plot(condo_fw_mlr)
```
#### 11.5.2.3 Step Backward

```{r}
condo_bw_mlr <- ols_step_backward_p(condo_mlr, p_val = 0.05, details = FALSE)
condo_bw_mlr
```

#### 11.5.2.4 Step Both Ways

```{r}
condo_sb_mlr <- ols_step_both_p(condo_mlr, p_val = 0.05, details = FALSE)
condo_sb_mlr
```

### 11.5.3 Model Selection
#### 11.5.3.1 Comparing Performances
In the code chunk below, `gsub()` is used to tidy the test value in *Name* field.

```{r}
metric <- compare_performance(condo_mlr, 
                              condo_fw_mlr$model, 
                              condo_bw_mlr$model,
                              condo_sb_mlr$model)
metric$Name <- gsub(".*\\\\([a-zA-Z0-9_]+)\\\\, \\\\model\\\\.*", "\\1", metric$Name)

plot(metric)
```

### 11.5.4 Visualising model parameters


```{r}
ggcoefstats(condo_sb_mlr$model,
            sort = "ascending")
```

### 11.5.5 Checking for multicollinearity
#### 11.5.5.1 The concept
-   **Multicollinearity** is a statistical concept where two or more independent variables in a regression model are correlated.
-   A statistical technique called the **variance inflation factor (VIF)** can detect and measure the amount of collinearity in a multiple regression model. 
-   VIF measures how much the variance of the estimated regression coefficients is inflated as compared to when the predictor variables are not linearly related. 

-   Interpretation of VIF

    -   < 5: low multicollinearity
    -   5-10: moderate multicollinearity
    -   \> 10: strong multicollineariy
#### 11.5.5.2 VIF
```{r}
check_collinearity(condo_sb_mlr$model)
```

#### 11.5.5.3 Visualising VIF
```{r}
plot(check_collinearity(condo_sb_mlr$model))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### 11.5.6 The test
In multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.

In the code chunk below, the [`check_model()`](https://easystats.github.io/performance/reference/check_model.html) of **performance** package is used to perform linearity assumption test.

```{r}
#| eval: false
out <- plot(check_model(condo_sb_mlr$model, 
                        panel = FALSE))
out[[2]]
```

### 11.5.7 Statistical interpretation

```{r}
#| echo: false
out <- plot(check_model(condo_sb_mlr$model, 
                        panel = FALSE))
out[[2]]
```

::: {style="font-size: 0.8em"}
Figure above reveals that most of the data points are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.
:::
:::

---

### 11.5.8 Normality assumption test


#### 11.5.8.1 The concept
Multiple Linear Regression analysis assumes that **the residuals (the differences between observed and predicted values) are normally distributed**.  This assumption can be assessed by using statistical graphics, or through statistical tests such as the Kolmogorov-Smirnov test.

#### 11.5.8.2 Visual test
Code chunk below uses [`check_normality`](https://easystats.github.io/performance/reference/check_normality.html) of *performance* package to perform normality assumption test.
```{r}
plot(check_normality(condo_sb_mlr$model))
```

Figure above reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.

---

### 11.5.9 Checking of outliers

::: panel-tabset

#### The code

```{r}
outliers <- check_outliers(condo_sb_mlr$model,
                           method = "cook")
outliers
```

::: callout-note
Read [Checking outliers with **performance**](https://easystats.github.io/performance/articles/check_outliers.html?q=outlier#multivariate-outliers) for more details.
:::


#### The plot

```{r}
plot(check_outliers(condo_sb_mlr$model,
                           method = "cook"))
```
:::


## 11.6 Spatial Non-stationary Assumption

The hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.

-   Ho: The residuals are randomly distributed (also known as spatial stationary) 
-   H1: The residuals are spatially non-stationary

---

### 11.6.1 Visualising spatial non-stationary

::: panel-tabset

#### Step 1

First, we will export the residual of the hedonic pricing model and save it as a data frame.

```{r}
mlr_output <- as.data.frame(condo_fw_mlr$model$residuals) %>%
  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)
```

#### Step 2

Next, we will join the newly created data frame with *condo_resale_sf* object.

```{r}
condo_resale_sf <- cbind(condo_resale_sf, 
                        mlr_output$FW_MLR_RES) %>%
  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)
```

#### Step 3

Next, we will use **tmap** package to display the distribution of the residuals on an interactive map.

The code churn below will turn on the interactive mode of tmap.

```{r}
#| eval: false
tmap_mode("view")
tm_shape(mpsz)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale_sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") 
tmap_mode("plot")
```

#### The residual map

Figure below reveals that there is sign of spatial autocorrelation.

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
tmap_mode("view")
tm_shape(mpsz)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale_sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") +
   tm_view(set.zoom.limits = c(12,14))
tmap_mode("plot")
```
:::

---

### 11.6.2 Spatial stationary test

To proof that our observation is indeed true, the Moran's I test will be performed

::: panel-tabset

#### Step 1
First, we will compute the distance-based weight matrix by using [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) function of **spdep**.

```{r}
condo_resale_sf <- condo_resale_sf %>%
  mutate(nb = st_knn(geometry, k=6,
                     longlat = FALSE),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```


#### Step 2
Next, [`global_moran_perm()`](https://sfdep.josiahparry.com/reference/global_moran_perm) of sfdep is used to perform global Moran permutation test.

```{r}
#| eval: false
global_moran_perm(condo_resale_sf$MLR_RES, 
                  condo_resale_sf$nb, 
                  condo_resale_sf$wt, 
                  alternative = "two.sided", 
                  nsim = 99)
```


#### The output

```{r}
#| echo: false
global_moran_perm(condo_resale_sf$MLR_RES, 
                  condo_resale_sf$nb, 
                  condo_resale_sf$wt, 
                  alternative = "two.sided", 
                  nsim = 99)
```


#### Statistical interpretation

The Global Moran's I test for residual spatial autocorrelation shows that **it's p-value is less than the alpha value of 0.05**. Hence, we **reject the null hypothesis** that the residuals are randomly distributed.

Since the Observed Global Moran I = 0.25586 which is greater than 0, we can **infer** that the residuals resemble **cluster distribution**.

:::
