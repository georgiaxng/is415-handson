---
title: "Take Home Exercise 2"
author: "Georgia Ng"
date: "September 26, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
format:
  html:
    code-fold: false
    code-summary: "Click to view the code"
    embed-resources: true
---

# 1. Overview

## 1.1 Introduction

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the Golden Triangle of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

In particular, we will only be **focusing on drug use cases** since my analysis aims to provide insights into the spatial distribution and trends of drug abuse across Thailand.

## 1.2 Goal

In this exercise, we are going to achieve the following tasks:

-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:

    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.

    -   a drug abuse indicators layer within the study area in sf polygon features.

-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).

-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).

-   Describe the spatial patterns revealed by the analysis above.

## 1.3 Importing of Packages

Before we start off, we will have to import the necessary packages required for us to conduct our analysis.

We will be using the following packages:

-   **`sf`**: Manages spatial vector data, enabling operations like spatial joins, buffering, and transformations for points, lines, and polygons.

-   **`tmap`**: Creates and customizes thematic maps for spatial data visualization, including static and interactive maps with various map elements.

-   **`tidyverse`**: A suite of packages for data manipulation (`dplyr`), visualization (`ggplot2`), and tidying (`tidyr`), facilitating a streamlined workflow for data analysis.

-   **`ggplot2`**: A powerful data visualization package within the tidyverse, allowing the creation of complex and customizable graphs. It supports a wide range of geospatial plotting when combined with `sf` objects, enabling seamless integration of spatial data in layered plots like points, polygons, and lines.

-   **`sfdep`**: Facilitates spatial dependence analysis by providing tools to compute spatial weights, autocorrelation statistics, and other spatial econometric measures. It integrates with the `sf` package, allowing users to easily conduct spatial analysis on spatial data frames.

-   **`RColorBrewer`**: Provides a collection of color palettes specifically designed for data visualization.

```{r}
pacman::p_load(sf, tmap, tidyverse, sfdep, ggplot2,RColorBrewer)
```

## 1.4 Dataset

For the purpose of this take-home exercise, two data sets shall be used, they are:

-   Thailand Drug Offenses \[2017-2022\] at Kaggle.

-   Thailand - Subnational Administrative Boundaries at HDX.

# 2. Data Wrangling

## 2.1 Importing Thailand Drug Offenses

This line of code imports the Thailand Drug Offenses dataset from Kaggle while using the `select()` function to remove the `province_th` column which is not useful to us. For this dataset, we have a total of 7392 rows.

```{r}
drug_offenses_sf <- read_csv("data/aspatial/drug_offence/thai_drug_offenses_2017_2022.csv") %>% select(-province_th)
```

```{r}
summary(drug_offenses_sf)
```

## 2.2 Importing Thailand - Subnational Administrative Boundaries

This line of code imports the Thailand - Subnational Administrative Boundaries dataset using `st_read()`. As shown, there is a total of 77 geographic features, representing the [76 provinces in Thailand as well as one additional special administrative area](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (Bangkok).

```{r}
thailand_province_sf <- st_read(dsn="data/geospatial/tha_adm_rtsd_itos_20210121_shp/", 
                   layer="tha_admbnda_adm1_rtsd_20220121") %>%
  select(ADM1_EN, geometry)  
```

This line of code checks if all the polygons are valid.

```{r}
st_is_valid(thailand_province_sf)
```

This line of code displays the study area.

```{r}
tm_shape(thailand_province_sf) +
  tm_polygons() 
```

## 2.3 Data Cleansing & Extraction

### 2.3.1 Extracting Data

To see the different types of drug offenses currently in the dataset, we can use `unique()`. From this we can see that there a total of 16 types of different offenses.

```{r}
unique(drug_offenses_sf$types_of_drug_offenses)
```

For this study, we will only be focusing on **drug use cases** which we will use `filter()` to do so, limiting the scope of this project to only that.

```{r}
drug_use_sf <-drug_offenses_sf%>%filter(types_of_drug_offenses=="drug_use_cases")
summary(drug_use_sf)
```

### 2.3.2 Performing relational join

#### 2.3.2.1 Failed Attempt

To fix and standardize the data for consistent matching, we will use `toupper()` to ensure the columns `ADM1_EN` of `thailand_province_sf` and `province_en` of `drug_use_sf` can match correctly.

```{r}
drug_use_sf$province_en <- toupper(drug_use_sf$province_en)
thailand_province_sf$ADM1_EN <- toupper(thailand_province_sf$ADM1_EN)
```

And to ensure that the changes are done correctly, we can use `head()` for this. As seen here, the province names are all now in upper cases.

::: panel-tabset
## drug_use_sf

```{r}
head(drug_use_sf)
```

## thailand_province_sf

```{r}
head(thailand_province_sf)
```
:::

The code chunk below will be used to update the attribute table of `drug_use_sf` and `thailand_province_sf` dataframe. This is performed by using `left_join()` of dplyr package.

```{r}
combined_drug_use_sf <- left_join(thailand_province_sf, drug_use_sf,
                          by =  c("ADM1_EN" = "province_en"))
```

After performing the `left_join()` between `thailand_province_sf` and `drug_use_sf`, we can use`summary()` to examine the resulting dataset. The output indicated that the combined dataset contains only **452 rows as compared to the original 462 rows for `drug_use_sf`**.

This suggests that there were rows in `drug_use_sf` that did not successfully join with `thailand_province_sf`.

```{r}
summary(combined_drug_use_sf)
```

#### 2.3.2.2 Fixing the Mismatch in Province Names

The most likely reasons for this could be a mismatch in certain Province Names, hence to effectively identified the province names that do not match between the two datasets, we can utilize `anti_join()` to do so, finding the rows in each that did not manage to join in each dataset. This provides a straightforward comparison of the discrepancies between the two datasets.

```{r}
# Get rows in drug_use_sf that didn't match with thailand_province_sf
unmatched_in_drug_use <- anti_join(drug_use_sf, thailand_province_sf, 
                                        by = c("province_en" = "ADM1_EN"))

# Get rows in thailand_province_sf that didn't match with drug_offenses_sf
unmatched_in_thailand_province <- anti_join(thailand_province_sf, drug_use_sf, 
                                            by = c("ADM1_EN" = "province_en"))

# Display mismatched values
unmatched_province_en <- unique(unmatched_in_drug_use$province_en)
unmatched_adm1_en <- unique(unmatched_in_thailand_province$ADM1_EN)

# View the mismatched sets
list("Unmatched in drug_use_sf" = unmatched_province_en,
     "Unmatched in thailand_province_sf" = unmatched_adm1_en)

```

As shown, there is a mismatch in the naming of the two provinces in each dataset although they are referring to the same provinces, hence we will need to standardise that. Since "Lopburi" and "Bueng Kan" were the names used in wikipedia, we will just be sticking with that.

This code performs standardization of province names in two datasets: `drug_offenses_sf` and `thailand_province_sf`, using `recode()` to change specific values.

```{r}
# Update the values in the province_en column
drug_use_sf <- drug_use_sf %>%
  mutate(province_en = recode(province_en,
                               "LOBURI" = "LOPBURI",
                               "BUOGKAN" = "BUENG KAN"))

# Update the values in the ADM1_EN column
thailand_province_sf <- thailand_province_sf %>%
  mutate(ADM1_EN = recode(ADM1_EN,
                          "LOP BURI" = "LOPBURI",
                          "BUENG KAN" = "BUENG KAN"))
```

#### 2.3.2.3 Reattempt At Performing Relational Join

Finally, let us try to perform the relational join again. As seen, we have a total of 462 rows which aligns with the total number of rows that is in `drug_offenses_sf` and for us to easier refer to it, we will rename the column to `province`.

```{r}
combined_drug_use_sf <- left_join(thailand_province_sf, drug_use_sf,
                          by =  c("ADM1_EN" = "province_en")) %>%
  rename(province = ADM1_EN)

summary(combined_drug_use_sf)
```

## 2.3 Drug Use Cases Visualisation

```{r}
#| eval: false
# Step 1: Aggregate data by year, summing the number of cases
drug_use_by_year <- combined_drug_use_sf %>% select(fiscal_year, no_cases) %>%
  group_by(fiscal_year) %>%
  summarise(total_cases = sum(no_cases), .groups = 'drop')

write_rds(drug_use_by_year, "data/rds/drug_use_by_year.rds")
```

```{r}
#| echo: false
drug_use_by_year <- read_rds( "data/rds/drug_use_by_year.rds")
```

```{r, fig.height=5}
# Create the bar plot with exact labels
ggplot(drug_use_by_year, aes(x = factor(fiscal_year), y = total_cases)) +  # Convert fiscal_year to factor
  geom_col(fill = "red", color = "black") +  # Use geom_col for the bar plot
  geom_text(aes(label = total_cases), vjust = -0.5, size = 5) +  # Add text labels on top of bars
  labs(title = "Total Drug Use Cases by Year", x = "Year", y = "Total Cases") +
  theme_minimal() +
  scale_x_discrete(drop = FALSE) + # Ensures all years are shown on the x-axis
  theme(plot.title = element_text(hjust = 0.5))
```

::: callout-note
We can see that 2021 has the most drug use cases recorded out of all these years.
:::

## 2.4 Geographic Distribution of Drug Use Cases by Province and by Year

Using the tmap methods below, we can create chloropeth maps to visualise the geographic distribution of the drug use cases by province and by year.

```{r, fig.height=10, fig.width=12}
# Set tmap mode to view or plot
tmap_mode("plot")

tm_shape(combined_drug_use_sf) +
  tm_polygons("no_cases", title = "Drug Use Cases", style = "quantile", palette = "Reds", n=5) +
  tm_facets(by = "fiscal_year", nrow = 2, ncol = 3) +  # Adjust rows and columns as needed
    tm_layout(
    main.title = "Geographic Distribution of Drug Use Cases by Province and by Year",  # Main title for the entire plot
    legend.position = c("left", "top"),
    legend.text.size = 1.2,
    main.title.size = 1.5,  
    main.title.position = "center"
  )

```

::: callout-note
We can observe that the northern and eastern regions take up the bulk of the numbers at different time periods.
:::

# 3. Global Spatial Autocorrelation Analysis

```{r}
# Filter for each year from 2017 to 2022
drug_use_2017_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2017)
drug_use_2018_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2018)
drug_use_2019_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2019)
drug_use_2020_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2020)
drug_use_2021_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2021)
drug_use_2022_sf <- combined_drug_use_sf %>% filter(fiscal_year == 2022)
```

## 3.1 Computing Contiguity Spatial Weights (QUEEN)

Before calculating global spatial autocorrelation statistics, we first need to construct spatial weights for the study area. These weights define the neighborhood relationships between the geographical units (such as counties) within the study region. To do so, we will use `st_conguity()` of the `sfdep` package, the equivalent of `poly2nb()` function from the `spdep` package. This function creates a list of neighboring regions based on shared boundaries and is needed for when we conduct the subsequent tests.

In particular, we are using the Queen contiguity criterion, which defines neighbors as regions that share either a boundary or a vertex. This method is often preferred for creating spatial weights because it includes more neighboring units than the Rook criterion (which only considers shared boundaries).

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
#| eval: false
nb_list <- st_contiguity(thailand_province_sf, queen = TRUE)

write_rds(nb_list, "data/rds/nb_list.rds")
summary(nb_list)
```

```{r}
#| echo: false
nb_list<-read_rds( "data/rds/nb_list.rds")
summary(nb_list)
```

::: callout-note
The most connected area has 9 neighbours. There are two area units with only one neighbours.

-   The summary report above shows that there are 77 area units in Thailand.

-   The least connected province is Trat, with only 1 neighbour.

-   The most connected provinces on the other hand, are Khon Kaen and Tak, with 9 neighbours.

-   A province with no neighbour is Phuket.
:::

For reference on where these provinces of interest are.

```{r, fig.height= 6}
#| code-fold: true

# Define the regions and corresponding colors
highlight_info <- c(
  "TRAT" = "yellow",     
  "KHON KAEN" = "green",
  "TAK" = "blue",
  "PHUKET" = "red"
)

# Set tmap mode to plot
tmap_mode("plot")  # Use "plot" for static maps

# Create the base map with all provinces
base_map <- tm_shape(thailand_province_sf) +
  tm_polygons(col = "lightgray", title = "Province Highlight")

# Initialize combined map with the base map
combined_map <- base_map

# Loop through the highlight_info to add each region
for (region in names(highlight_info)) {
  combined_map <- combined_map + 
    tm_shape(thailand_province_sf[thailand_province_sf$ADM1_EN == region, ]) +
    tm_polygons(col = highlight_info[region], 
                 alpha = 0.7)  # No title needed here
}

# Manually add a legend using tm_add_legend
legend_elements <- lapply(names(highlight_info), function(region) {
  list(label = region, col = highlight_info[region])
})

# Add layout options and custom legend
combined_map +
  tm_add_legend(type = "fill", 
                labels = names(highlight_info), 
                col = highlight_info, 
                title = "Highlighted Provinces") +
  tm_layout(
    title = "Highlighted Provinces in Thailand", 
    legend.position = c("right", "bottom"),
    title.position = c("center", "top"),
    legend.title.size = 1.2,  # Adjust legend title size
    legend.text.size = 1      # Adjust legend text size
  )
```

To further investigate why Phuket has no neighboring provinces, we can examine the zoomed-in map of the region. The map clearly illustrates that Phuket is an island, situated away from the mainland. This geographical separation accounts for its lack of direct neighboring provinces.

```{r}
#| code-fold: true
# Filter the dataset for Phuket province
phuket_sf <- thailand_province_sf %>% 
  filter(ADM1_EN == "PHUKET")

# Get bounding box for Phuket and slightly expand it to include surrounding provinces
bbox_phuket <- st_bbox(phuket_sf)

# Expand the bounding box by a certain factor (e.g., 0.1 degrees in each direction)
bbox_phuket_expanded <- bbox_phuket
bbox_phuket_expanded[1] <- bbox_phuket[1] - 0.1  # xmin
bbox_phuket_expanded[3] <- bbox_phuket[3] + 0.1  # xmax
bbox_phuket_expanded[2] <- bbox_phuket[2] + 0.1  # ymin (correcting direction)
bbox_phuket_expanded[4] <- bbox_phuket[4] + 0.1  # ymax

# Create a temporary dataset for plotting
phuket_plot_data <- thailand_province_sf %>%
  mutate(is_phuket = ifelse(ADM1_EN == "PHUKET", "Phuket", "Other Provinces"))

# Set the color palette explicitly for Phuket and other provinces
color_palette <- c("Phuket" = "red", "Other Provinces" = "gray85")

# Plot using tmap and focus on the Phuket region and its surroundings
tmap_mode("plot")  # Set tmap to static plotting mode

tm_shape(phuket_plot_data, bbox = bbox_phuket_expanded) +
  tm_borders() +        # Add borders of your spatial data
  tm_fill(col = "is_phuket", palette = color_palette) +  # Fill Phuket with red, others gray  
  tm_layout(title = "Phuket and Surrounding Provinces", frame = TRUE)  # Zoom in to Phuket region
```

## 3.2 Generating Spatial Weights

The chunk of code below utilizes the `st_weights()` function from the `sfdep` package to generate spatial weights for each neighboring polygon. Specifically, it constructs a weights matrix based on the contiguity defined by the `nb_list` object, allowing for the specification of weights style (here set to "W" for row-standardized weights). The `allow_zero` parameter is set to `TRUE`, which permits the inclusion of polygons with no neighbors in the analysis, ensuring that all spatial units are represented in the weights matrix.

```{r}
# nb_list is our neighbors list created using st_contiguity
gm_wt <- st_weights(nb_list, style = "W", allow_zero = TRUE)
```

## 3.3 Moran's I Test

We will be using Moran's I to compute global spatial autocorrelation instead of Geary's C because Moran's I provides a more comprehensive measure of spatial autocorrelation. While Geary's C focuses on the squared differences between neighboring observations, which can make it sensitive to local variations and outliers, Moran's I considers the overall correlation between values and their spatial locations. This allows us to capture both positive and negative spatial autocorrelation more effectively.

Furthermore, Moran's I is well-suited for assessing patterns across larger regions, making it ideal for our analysis of spatial relationships of drug use across provinces in Thailand. The confidence interval for this experiment will be set at 95%.

**Hypothesis Testing:**

Null Hypothesis: The spatial distribution of drug use cases resemble random distribution.

Alternative Hypothesis: The spatial distribution of drug use cases does not resemble random distribution.

The below line of code uses `global_moran_test()` of sfdep package to performs Moran’s I statistical testing and `global_moran_perm()` of sfdep is used to perform permutation testing for Moran’s I statistic. A total of 1000 simulation will be performed. We will also be using `seed()` to ensure the reproducibility of our code.

::: panel-tabset
## 2017

```{r}
global_moran_test(drug_use_2017_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2017<-global_moran_perm(drug_use_2017_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2017
```

The statistical report for 2017 above show that the p-value is greater than alpha value of 0.05. Hence, we do not have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering.

## 2018

```{r}
global_moran_test(drug_use_2018_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2018<-global_moran_perm(drug_use_2018_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2018
```

The statistical report for 2018 above show that the p-value is higher than alpha value of 0.05. Hence, we do not have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering.

## 2019

```{r}
global_moran_test(drug_use_2019_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2019<-global_moran_perm(drug_use_2019_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2019
```

The statistical report for 2019 above show that the p-value is higher than alpha value of 0.05. Hence, we do not have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering. This number (`0.13805`) is however greater than the previous years, a sign that stronger clustering occurred in this year as compared to the previous.

## 2020

```{r}
global_moran_test(drug_use_2020_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2020<-global_moran_perm(drug_use_2020_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2020
```

The statistical report for 2020 above show that the p-value is higher than alpha value of 0.05. Hence, we do not have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering.

## 2021

```{r}
global_moran_test(drug_use_2021_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2021<-global_moran_perm(drug_use_2021_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2021
```

The statistical report for 2021 above show that the p-value is lower than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering. Overall, this shows a weak but significant positive spatial autocorrelation in drug use cases.

## 2022

```{r}
global_moran_test(drug_use_2022_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE)
```

```{r}
set.seed(1234)
gmc_i_2022<-global_moran_perm(drug_use_2022_sf$no_cases,nb_list,gm_wt, zero.policy = TRUE, nsim=999)
gmc_i_2022
```

The statistical report for 2022 above show that the p-value is lower than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug use cases resemble random distribution (i.e. independent from spatial). Because the Moran’s I statistics is greater than 0 but not close to 1, we can infer that the spatial distribution shows weak signs of clustering. Overall, this shows a weak but significant positive spatial autocorrelation in drug use cases.
:::

::: callout-note
-   Over the years, we can observe that the Moran's I statistics is displaying an increasing trend all the way until 2020 when it decreased and then reaching an all-time high in 2021.

-   We can also observe that the drug use cases in 2021 and 2022 no longer resemble random distribution, indicating significant spatial autocorrelation. This change suggests that drug use is becoming increasingly concentrated in specific geographic areas, warranting further investigation into the factors contributing to this clustering.

-   The observed clustering, particularly in 2021 and 2022, suggests that policymakers should consider region-specific interventions. Identifying hotspots for drug use can help allocate resources more effectively and develop targeted prevention and treatment programs.
:::

## 3.4 Visualising Monte Carlo Moran’s I

In order to examine the simulated Moran’s I test statistics in greater detail, we can collate the descriptive statistics of the test and plot the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below `summary()`, `var()`, `hist()` and `abline()` are used.

::: panel-tabset
## Histogram

```{r, fig.height=8}
#| code-fold: true
# Set up the plotting area for 2 columns and 3 rows
par(mfrow = c(3, 2)) 

# Histogram for 2017
hist(gmc_i_2017$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2017")
abline(v = 0, col = "red")

# Histogram for 2018
hist(gmc_i_2018$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2018")
abline(v = 0, col = "red")

# Histogram for 2019
hist(gmc_i_2019$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2019")
abline(v = 0, col = "red")

# Histogram for 2020
hist(gmc_i_2020$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2020")
abline(v = 0, col = "red")

# Histogram for 2021
hist(gmc_i_2021$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2021")
abline(v = 0, col = "red")

# Histogram for 2022
hist(gmc_i_2022$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I", 
     main = "Histogram for 2022")
abline(v = 0, col = "red")

```

## Summary

```{r}
# 2017
print(summary(gmc_i_2017$res[1:999]))
# 2018
print(summary(gmc_i_2018$res[1:999]))
# 2019
print(summary(gmc_i_2019$res[1:999]))
# 2020
print(summary(gmc_i_2020$res[1:999]))
# 2021
print(summary(gmc_i_2021$res[1:999]))
# 2022
print(summary(gmc_i_2022$res[1:999]))
```

## Variance

```{r}
# Calculating variances and storing them in variables
gmc_i_var_2017 <- var(gmc_i_2017$res[1:999])
gmc_i_var_2018 <- var(gmc_i_2018$res[1:999])
gmc_i_var_2019 <- var(gmc_i_2019$res[1:999])
gmc_i_var_2020 <- var(gmc_i_2020$res[1:999])
gmc_i_var_2021 <- var(gmc_i_2021$res[1:999])
gmc_i_var_2022 <- var(gmc_i_2022$res[1:999])

# Printing the variances
cat(sprintf("Variance of '2017': %f\n", gmc_i_var_2017))
cat(sprintf("Variance of '2018': %f\n", gmc_i_var_2018))
cat(sprintf("Variance of '2019': %f\n", gmc_i_var_2019))
cat(sprintf("Variance of '2020': %f\n", gmc_i_var_2020))
cat(sprintf("Variance of '2021': %f\n", gmc_i_var_2021))
cat(sprintf("Variance of '2022': %f\n", gmc_i_var_2022))

```
:::

::: callout-note
-   Right skewed histogram: Majority of the data have negative spatial autocorrelation but there are some regions with significantly higher positive spatial autocorrelation (high drug use cases in certain neighborhoods, low or moderate in majority).
-   Negative Median: Indicates negative spatial autocorrelation, majority of provinces have low or moderate drug use)
-   Low Variance (Range from 0.003 to 0.0055): Suggests consistency across simulations, indicating that the presence of spatial patterns are not influenced by local conditions
:::

# 4. Local Spatial Autocorrelation Analysis

## 4.1 Visualising Local Moran's I & p-value of Local Moran's I

In the code chunk below, we are are using `local_moran()` of `sfdep` package to performs Moran’s I statistical testing and tmap functions to prepare a choropleth map by using value in the p_ii_sim field.

For consistency sake, we will be sticking to `p_ii_sim` for the entire experiment.

::: panel-tabset
## 2017

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2017 <- drug_use_2017_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2017 <- tm_shape(lisa_2017) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2017",
            main.title.size = 0.8)

map2_2017 <- tm_shape(lisa_2017) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2017",
            main.title.size = 0.8)

tmap_arrange(map1_2017, map2_2017, ncol = 2)
```

## 2018

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2018 <- drug_use_2018_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2018 <- tm_shape(lisa_2018) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2018",
            main.title.size = 0.8)

map2_2018 <- tm_shape(lisa_2018) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2018",
            main.title.size = 0.8)

tmap_arrange(map1_2018, map2_2018, ncol = 2)

```

## 2019

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2019 <- drug_use_2019_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2019 <- tm_shape(lisa_2019) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2019",
            main.title.size = 0.8)

map2_2019 <- tm_shape(lisa_2019) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2019",
            main.title.size = 0.8)

tmap_arrange(map1_2019, map2_2019, ncol = 2)

```

## 2020

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2020 <- drug_use_2020_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2020 <- tm_shape(lisa_2020) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2020",
            main.title.size = 0.8)

map2_2020 <- tm_shape(lisa_2020) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2020",
            main.title.size = 0.8)

tmap_arrange(map1_2020, map2_2020, ncol = 2)

```

## 2021

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2021 <- drug_use_2021_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2021 <- tm_shape(lisa_2021) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2021",
            main.title.size = 0.8)

map2_2021 <- tm_shape(lisa_2021) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2021",
            main.title.size = 0.8)

tmap_arrange(map1_2021, map2_2021, ncol = 2)

```

## 2022

```{r,fig.height=6}
#| code-fold: true
set.seed(1234)
lisa_2022 <- drug_use_2022_sf %>% 
  mutate(local_moran = local_moran(
    no_cases, nb_list, gm_wt, nsim = 999, zero.policy=TRUE),
         .before = 1) %>%
  unnest(local_moran)

tmap_mode("plot")
map1_2022 <- tm_shape(lisa_2022) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Use Cases in 2022",
            main.title.size = 0.8)

map2_2022 <- tm_shape(lisa_2022) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value of Local Moran's I in 2022",
            main.title.size = 0.8)

tmap_arrange(map1_2022, map2_2022, ncol = 2)

```
:::

## 4.2 Skewness of Lisa

In order to determine whether to use mean or median for the subsequent visualisation, we will need to check if the data has a normal distribution of if its skewed.

```{r}
summary(lisa_2017$skewness)
summary(lisa_2018$skewness)
summary(lisa_2019$skewness)
summary(lisa_2020$skewness)
summary(lisa_2021$skewness)
summary(lisa_2022$skewness)
```

The median of the skewness statistics are in the negative range, from -0.32683 to -1.8628 which is close to 0. Hence we will be using mean to perform classification.

## 4.3 Visualising Lisa Map

LISA map is a categorical map showing outliers and clusters.

**Two Types of Outliers:**

**High-Low**:

-   Areas that have high values (e.g., a high incidence of a certain event) that are surrounded by areas with low values. This pattern may suggest that the high value is an anomaly compared to the neighboring areas.

**Low-High**:

-   Areas that exhibit low values surrounded by areas with high values. This situation may suggest that the low value is an anomaly or an area of concern, indicating that it is isolated from surrounding regions with higher levels of the phenomenon.

**Two Types of Clusters:**

**High-High**:

-   Areas where high values are surrounded by other high values. This indicates a cluster of similar high values, suggesting positive spatial autocorrelation. This pattern may reflect shared influences or conditions contributing to the elevated values in those regions. For instance, areas with high rates of drug use that are geographically close may indicate a pervasive issue or common underlying factors.

**Low-Low**:

-   Areas where low values are surrounded by other low values. This pattern indicates a cluster of similar low values, suggesting that these areas consistently experience lower levels of the phenomenon in question.

The below chunk of code generates the lisa map for each year based on the parameter `mean`, we will also be filtering for only significant data (\>95%).

::: panel-tabset
## 2017

```{r,fig.height=6}
#| code-fold: true
lisa_sig_2017 <- lisa_2017 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2017) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_2017) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) +  # Change the color palette here
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2017", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2017 %>%  select(province, mean))
```

## 2018

```{r,fig.height=6}
#| code-fold: true
lisa_sig_2018 <- lisa_2018 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2018) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_2018) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) +  # Change the color palette here
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2018", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2018 %>%  select(province, mean))
```

## 2019

```{r,fig.height=6}
#| code-fold: true
lisa_sig_2019 <- lisa_2019 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2019) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_sig_2019) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2019", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2019 %>%  select(province, mean))
```

## 2020

```{r,fig.height=6}
#| code-fold: true
lisa_sig_2020 <- lisa_2020 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2020) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_sig_2020) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2020", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2020 %>%  select(province, mean))

```

## 2021

```{r,fig.height=6}
#| code-fold: true
lisa_sig_2021 <- lisa_2021 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2021) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_sig_2021) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2021", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2021 %>%  select(province, mean))
```

## 2022

```{r,fig.height=6}
#| code-fold: true

lisa_sig_2022 <- lisa_2022 %>%
  filter(p_ii_sim < 0.05)

tmap_mode("plot")
tm_shape(lisa_2022) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(lisa_sig_2022) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2022", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

print(lisa_sig_2022 %>%  select(province, mean))
```
:::

::: callout-note
High-High Clusters in 2017-2020

-   From 2017-2020, we can observe Chachoengsao being in the "High-High" category, suggesting that this province consistently has a high number of drug cases surrounded by other provinces with similarly high numbers. This type of spatial autocorrelation indicates a cluster of high drug use incidents in that region.

-   Possible Reason: A likely reason for this observation is the geographic location of this province. Chachoengsao is strategically located near major transportation routes, including highways and railways, facilitating the movement of drugs. Its proximity to Bangkok and other major urban centers may have also contribute to increased drug trafficking and distribution.

Outliers: Nonthaburi, Samut Prakan

-   We can also observe that in the same time period, there exists different provinces (e.g Nonthaburi, Samut Prakan) close by in the "Low-High" category west of Chachoengsao, suggesting that these provinces are outliers with low drug uses surrounded by provinces with high drug uses.

Trend of High-High Clusters

-   For 2021, we can observe that the "High-High" cluster has moved to the eastern region of Thailand to Yasothon.

-   In the subsequent year 2022 however, this "High-High" cluster has moved slightly north of Yasothon and now includes 4 provinces: Nong Khai, Maha Sarakham Kalasin and Sakon Nakhon.

-   This indicates a continued eastward movement of drug use, reflecting ongoing dynamics in drug trafficking and consumption.

Low-Low Clusters

-   Between 2017 - 2022, we can observe that there are clusters of provinces with low drug use cases in the west of Thailand.
:::

# 5. Hot Spot and Cold Spot Area Analysis (HCSA)

## 5.1 Computing Local Gi\* Statistics

As usual, we will need to derive a spatial weight matrix before we can compute local Gi\* statistics. This weight matrix defines the spatial relationships (such as neighbors or distance) between the regions or areas and determines how much influence neighboring areas have on each other, which is crucial for calculating spatial autocorrelation (like Gi\*)

The code chunk below is used to firstly derive a spatial weight matrix by using `sfdep` functions and `tidyverse` approach and secondly, compute the local Gi\*. Since the geometry column of our dataset contains multipolygons (which represent areas with multiple disjointed sections) instead of polygons, we will be calculating the centroid which will help simplify the spatial relationships by reducing the complex shapes into single points. This makes it easier to compute distance-based spatial statistics.

::: panel-tabset
## 2017

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2017 <- drug_use_2017_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry), 
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2017 <- wm_idw_2017 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)
write_rds(HCSA_2017, "data/rds/HCSA_2017.rds")
```

```{r}
#| echo: false
HCSA_2017 <- read_rds( "data/rds/HCSA_2017.rds")
HCSA_2017
```

## 2018

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2018 <- drug_use_2018_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry), 
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2018 <- wm_idw_2018 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

write_rds(HCSA_2018, "data/rds/HCSA_2018.rds")

```

```{r}
#| echo: false
HCSA_2018 <- read_rds( "data/rds/HCSA_2018.rds")
HCSA_2018
```

## 2019

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2019 <- drug_use_2019_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry),
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2019 <- wm_idw_2019 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

write_rds(HCSA_2019, "data/rds/HCSA_2019.rds")

```

```{r}
#| echo: false
HCSA_2019 <- read_rds( "data/rds/HCSA_2019.rds")
HCSA_2019
```

## 2020

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2020 <- drug_use_2020_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry),
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2020 <- wm_idw_2020 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

write_rds(HCSA_2020, "data/rds/HCSA_2020.rds")

```

```{r}
#| echo: false
HCSA_2020 <- read_rds( "data/rds/HCSA_2020.rds")
HCSA_2020
```

## 2021

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2021 <- drug_use_2021_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry),
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2021 <- wm_idw_2021 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

write_rds(HCSA_2021, "data/rds/HCSA_2021.rds")

```

```{r}
#| echo: false
HCSA_2021 <- read_rds( "data/rds/HCSA_2021.rds")
HCSA_2021
```

## 2022

```{r}
#| eval: false
#| code-fold: true
set.seed(1234)
wm_idw_2022 <- drug_use_2022_sf %>%
  mutate(nb = st_contiguity(geometry),
         centroid = st_centroid(geometry),
         wts = st_inverse_distance(nb, centroid,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

HCSA_2022 <- wm_idw_2022 %>% 
  mutate(local_Gi = local_gstar_perm(
    no_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

write_rds(HCSA_2022, "data/rds/HCSA_2022.rds")

```

```{r}
#| echo: false
HCSA_2022 <- read_rds( "data/rds/HCSA_2022.rds")
HCSA_2022
```
:::

## 5.2 Visualising Local HCSA

To visualise local HCSA, we can plot the gi\* value and the p-value of each year side by side.

The chunk of code below uses `tmap()` to plot and visualize the spatial distribution of the Gi\* statistic for the different years. For this section we have the maps of Gi\* and the p-value arranged side by side for easier comparisons.

::: panel-tabset
## 2017

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2017) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of 2017",
            main.title.size = 0.8)
map2 <- tm_shape(HCSA_2017) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2017",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)
```

## 2018

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2018) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))+
  tm_layout(main.title = "Gi* of 2018",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_2018) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2018",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)

```

## 2019

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2019) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))+
  tm_layout(main.title = "Gi* of 2019",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_2019) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2019",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)

```

## 2020

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2020) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))+
  tm_layout(main.title = "Gi* of 2020",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_2020) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2020",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)

```

## 2021

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))+
  tm_layout(main.title = "Gi* of 2021",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2021",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)

```

## 2022

```{r}
#| code-fold: true
tmap_mode("plot")
map1 <- tm_shape(HCSA_2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))+
  tm_layout(main.title = "Gi* of 2022",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* of 2022",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)
```
:::

## 5.3 Visualising Hot Spot & Cold Spot Areas

Here, we will plot the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using the appropriate tmap functions.

::: panel-tabset
## 2017, 2018

```{r}
#| code-fold: true
tmap_mode("plot")

HCSA_2017_sig <- HCSA_2017  %>%
  filter(p_sim < 0.05)
HCSA_2018_sig <- HCSA_2018  %>%
  filter(p_sim < 0.05)

map1<- tm_shape(HCSA_2017) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2017_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2017",
            main.title.size = 0.8)
map2<- tm_shape(HCSA_2018) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2018_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2018",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_2017_sig %>%
  select(gi_star, province)
HCSA_2018_sig %>%
  select(gi_star, province)
```

## 2019, 2020

```{r}
#| code-fold: true
tmap_mode("plot")

HCSA_2019_sig <- HCSA_2019  %>%
  filter(p_sim < 0.05)
HCSA_2020_sig <- HCSA_2020  %>%
  filter(p_sim < 0.05)

map1<- tm_shape(HCSA_2019) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2019_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2019",
            main.title.size = 0.8)
map2<- tm_shape(HCSA_2020) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2020_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2020",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_2019_sig %>%
  select(gi_star, province)
HCSA_2020_sig %>%
  select(gi_star, province)
```

## 2021, 2022

```{r}
#| code-fold: true
tmap_mode("plot")

HCSA_2021_sig <- HCSA_2021  %>%
  filter(p_sim < 0.05)
HCSA_2022_sig <- HCSA_2022  %>%
  filter(p_sim < 0.05)

map1<- tm_shape(HCSA_2021) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2021_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2021",
            main.title.size = 0.8)
map2<- tm_shape(HCSA_2022) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2022_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2022",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_2021_sig %>%
  select(gi_star, province)
HCSA_2022_sig %>%
  select(gi_star, province)
```
:::

::: callout-note
-   Between 2017 - 2019, we can observe that Samut Prakan and Samut Sakhon are both hotspots of drug uses, with Samut Prakan continuing this trend even in 2020.

-   Besides that however, there are no other hotspots or coldspots identified in 2020, showing that there are no significant data for the rest of the provinces.

-   In 2021, we can observe a large area of coldspots in the west and interestingly, this aligns with the observations we have made in the LISA map where this area was observed as a Low-Low cluster.

-   In 2022, we can observe a hotspot area spanning several provinces in the east of Thailand. This is a trend that was not observed in the previous years, showing that the concentrations of drug use has changed significantly from the previous years.
:::

## 5.4 Interesting Observations

### 5.4.1 Seemingly Contradictory Results in LISA map & HCSA for 2017

```{r}
#| code-fold: true
tmap_mode("plot")

map1<-tm_shape(lisa_2017) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig_2017) +
  tm_fill("mean", palette = brewer.pal(4, "Set1")) +  # Change the color palette here
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "Lisa Map for 2017", main.title.size = 1.2, main.title.position = "center", legend.text.size = 1.2)

map2<- tm_shape(HCSA_2017) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_shape(HCSA_2017_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA of 2017",
            main.title.size = 0.8)
tmap_arrange(map1, map2, ncol = 2)
```

::: callout-note
In the LISA map, we can observe that **Samut Prakan and Samut Sakhon** (the green parts) were identified as Low-High clusters, meaning areas with low drug uses surrounded by areas with high drug uses. However, when observing the HCSA map for the same year, the same provinces were however identified as "hotspots" which could possibly seem contradictory.

However, these two methods, though related, measure different aspects of spatial patterns and their interpretation varies. LISA measures local spatial autocorrelation whereas the HCSA method identifies hot and cold spots by assessing the concentration of high or low values within an area, considering the values of the area itself and those of its neighbors.

Why the Area is a Low-High Cluster in LISA but Has a High Gi\* Value:

LISA vs HCSA:

-   In LISA, the area is classified as **low-high** because **its value is lower than its neighbors**. Even though its neighbors have higher values, the area itself might be somewhat lower in comparison, creating a spatial outlier (a low value in a region of high values).

-   Gi\* (used in HCSA), on the other hand, assesses the **collective clustering** of values. Even if the area has a lower value compared to its neighbors, the fact that it is part of a **larger high-value cluster** (with its neighbors) results in a **high Gi**\* score.

Therefore, in this case, these areas are **low-high** cluster in the LISA map because they have a lower value than its neighbors, but still contributes to a **high-value hotspot** in the Gi\* analysis, leading to a high positive Gi\* score.
:::

# 6. Conclusion

To conclude, we can derive the following insights from the combined analysis of Moran's I statistics, LISA, and HCSA which reveals important trends in the spatial distribution of drug use across Thailand between 2017 and 2022.

1.  Moran's I Trend:\
    Over the years, the Moran's I statistic shows an increasing trend, peaking in 2021, indicating rising spatial autocorrelation in drug use cases. This suggests that drug use has become more geographically concentrated, moving away from random distribution. This increase in clustering signals a shift in how drug-related issues are spreading across regions, with specific areas experiencing higher concentrations.

2.  LISA Insights:\
    The LISA maps further support this finding by identifying significant High-High clusters in certain regions, notably Samut Prakan and Samut Sakhon (excluded from 2019) as a consistent hotspot from 2017 to 2020. In 2021, new Low-Low clusters emerged in the western provinces, aligning with reduced drug use, while eastern provinces became new High-High clusters in 2022, reflecting a shift in drug activity patterns. The consistent clustering patterns observed in both high and low drug use areas underscore the strong spatial dependence across provinces.

3.  HCSA Observations:\
    The HCSA analysis highlights key hotspots in Samut Prakan and Samut Sakhon in the earlier years, with Samut Prakan remaining a focal point of drug use through 2020. In 2021, we started observing a large area of coldspots in the west and in 2022, we observe a shift of hotspot activity toward eastern Thailand. (similar to what we have observed in the LISA map)

From the above insights, we can observe that the drug use trends and patterns stayed generally consistent between the years of 2017 to 2020. However, from 2021 onwards, we observe significant changes in the distribution, with new areas—particularly in the east—emerging as hotspots. The most significant event during this time period was the COVID-19 pandemic, which likely influenced these shifts. This disruption could have affected how the drug distribution network and supply chains operated, as well as how local communities responded to these changes. Lockdowns and movement restrictions may have altered drug trafficking routes and supply availability, leading to new areas becoming focal points for drug activity.

It is important for drug enforcement efforts to take note of these trends and focus on these newly emerging areas of drug use. By further identifying the root causes behind this shift, authorities can better tailor their strategies to curb the rising drug activity、
